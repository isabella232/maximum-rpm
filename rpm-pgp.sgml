  <chapter id="ch-rpm-pgp">
    <title>Adding PGP Signatures to a Package</title>
    <!-- label: rpm-pgp -->

    <indexterm>
      <primary>PGP!signatures!adding</primary>
      <secondary></secondary>
      <tertiary></tertiary>
    </indexterm>

    <para>
      In this chapter, we'll explore the steps required to add a digital
      signature to a package, using the software known as Pretty Good Privacy,
      or PGP.  If you've used PGP before, you probably know everything you'll
      need to start signing packages in short order.
    </para>
    <para>
      On the other hand, if you feel you need a bit more information on PGP
      before starting, please refer to Appendix <xref linkend="ch-pgp-intro">
      for a brief introduction.  Once you feel comfortable with PGP, come on
      back and learn how easy signing packages is&hellip;
    </para>

    <sect1 id="s1-rpm-pgp-why-sign">
      <title>Why Sign a Package?</title>
      <indexterm>
        <primary>PGP!signatures!reasons for</primary>
        <secondary></secondary>
        <tertiary></tertiary>
      </indexterm>

      <para>
        The reason for signing a package is to provide authentication.  With a
        signed package, it's possible for your user community to verify that the
        package they have was in your possession at some time and has not been
        changed since then.  That "not changed" part is also a good reason to
        sign your packages, as digital signatures are a very robust way to guard
        against any modifications to the package.
      </para>
      <para>
        Of course, as with anything else in life, adding a digital signature to
        a package isn't an ironclad guarantee that everything is right with the
        package, but it's about as sure a thing as humans can make it.
      </para>
    </sect1>

    <sect1 id="s1-rpm-pgp-getting-ready">
      <title>Getting Ready to Sign</title>

      <para>
        OK, we've convinced you that signing packages is a good idea.  Now we've
        got to make sure PGP and RPM are up to the task.  As you might imagine,
        there are two parts to this process: one for PGP, and one for RPM.
        Let's get PGP ready first.
      </para>

      <sect2 id="s2-rpm-pgp-creating-key-pair">
        <title>Preparing PGP: Creating a Key Pair</title>
        <indexterm>
          <primary>PGP!signatures!key pair generation</primary>
          <secondary></secondary>
          <tertiary></tertiary>
        </indexterm>

        <para>
          There is really very little to be done to PGP, assuming it's been
          installed properly.  The only thing required is to generate a key
          pair.  As mentioned in our mini-primer on PGP, the key pair consists
          of a secret key and a public key.  In terms of signing packages, you
          will use your secret key to do the actual signing.  Anyone interested
          in checking your signature will need your public key.
        </para>
        <para>
          Creating a key pair is quite simple.  All that's required is to issue
          a <command>pgp -kg</command> command, enter some information, and
          create some random bits.  Here's an example key generating session:

          <figure id="sc-rpm-pgp-key-generation">
            <title>Using PGP to Generate a Key</title>
            <screen width="60">
<prompt># </prompt><userinput>pgp -kg</userinput>
<computeroutput>
Pretty Good Privacy(tm) 2.6.3a - Public-key encryption for the masses.
(c) 1990-96 Philip Zimmermann, Phil's Pretty Good Software. 1996-03-04
Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.
Distributed by the Massachusetts Institute of Technology.
Export of this software may be restricted by the U.S. government.
Current time: 1996/10/31 00:42 GMT

Pick your RSA key size:
    1)   512 bits- Low commercial grade, fast but less secure
    2)   768 bits- High commercial grade, medium speed, good security
    3)  1024 bits- "Military" grade, slow, highest security

</computeroutput>
<prompt>Choose 1, 2, or 3, or enter desired number of bits: </prompt><userinput>3</userinput>
<computeroutput>
Generating an RSA key with a 1024-bit modulus.

You need a user ID for your public key.  The desired form for this
user ID is your name, followed by your E-mail address enclosed in
&lt;angle brackets&gt;, if you have an E-mail address.
For example:  John Q. Smith &lt;12345.6789@compuserve.com&gt;
</computeroutput>
<prompt>Enter a user ID for your public key: </prompt>

<userinput>Example Key for RPM Book</userinput>
<computeroutput>
You need a pass phrase to protect your RSA secret key.
Your pass phrase can be any sentence or phrase and may have many
words, spaces, punctuation, or any other printable characters.

</computeroutput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<prompt>Enter same pass phrase again: </prompt><userinput>&lt;passphrase&gt;</userinput> (Still not echoed)

<computeroutput>
Note that key generation is a lengthy process.

We need to generate 952 random bits.  This is done by measuring the
time intervals between your keystrokes.  Please enter some random text
on your keyboard until you hear the beep:

</computeroutput>
(Many random characters were entered)
<computeroutput>
   0 * -Enough, thank you.
............................................
................................**** ...**** 
Pass phrase is good.  Just a moment....
Key signature certificate added.
Key generation completed.
</computeroutput>
<prompt># </prompt>
            </screen>
          </figure>
        </para>
        <para>
          Let's review each of the times PGP required information.  The first
          thing PGP needed to know was the key size we wanted.  Depending on
          your level of paranoia, simply choose an appropriate key size.  In our
          example, we chose the "They're out to get me" key size of 1024 bits.
        </para>
        <para>
          Next, we needed to choose a user ID for the key.  The user ID should
          be descriptive and should also include sufficient information for
          someone to contact you.  We entered <userinput>Example Key for RPM
          Book</userinput>, which goes against our suggestion, but is sufficient
          for the purposes of our example.
        </para>
        <para>
          After entering a user ID, we needed to add a pass phrase.  The pass
          phrase is used to protect your secret key, so it should be something
          difficult for someone else to guess.  It should also be memorable for
          you, because if you forget your pass phrase, you won't be able to use
          your secret key!  I entered a couple of words and numbers, put
          together in such a way that no one could ever guess I typed
          <userinput>rpm2kool4words</userinput>
        </para>
        <para>
          Oops&hellip;
        </para>
        <para>
          The pass phrase is entered twice, to ensure that no typing mistakes
          were made.  PGP also performs some cursory checks on the pass phrase,
          ensuring that the phrase is at least somewhat secure.
        </para>
        <para>
          Finally comes the strangest part of the key-generation process,
          creating random bits.  This is done by measuring the time between
          keystrokes.  The secret here is to <emphasis>not</emphasis> hold down
          a key so that it auto-repeats and to <emphasis>not</emphasis> wait
          several seconds between keystrokes.  Simply start typing anything
          (even nonsense text) until PGP tells you you've typed enough.
        </para>
        <para>
          After generating enough random bits, PGP takes a minute or so to
          create the key pair.  Assuming everything completed successfully,
          you'll see an ending message similar to the one above.  You'll also
          find, in a subdirectory of your login directory called
          <filename>.pgp</filename>, the following files:

          <figure id="sc-rpm-pgp-pgp-directory-contents">
            <title>The Contents of <filename>~/.pgp</filename></title>
            <screen width="60">
<prompt># </prompt><userinput>ls -al ~/.pgp</userinput>
<computeroutput>
total 6
drwxr-xr-x   2 root     root         1024 Oct 30 19:44 .
drwxr-xr-x   5 root     root         1024 Oct 30 19:44 ..
-rw-------   1 root     root          176 Oct 30 19:44 pubring.bak
-rw-------   1 root     root          331 Oct 30 19:44 pubring.pgp
-rw-------   1 root     root          408 Oct 30 19:44 randseed.bin
-rw-------   1 root     root          509 Oct 30 19:44 secring.pgp
</computeroutput>
<prompt># </prompt>
            </screen>
          </figure>
        </para>
        <para>
          For those interested in learning exactly what each file is, feel free
          to consult any of the fine books on PGP.  For the purposes of signing
          packages, all we need to know is where these files are located.
        </para>
        <para>
          That's it!  Now it's time to configure RPM to use your newly generated
          key.
        </para>
      </sect2>

      <sect2 id="s2-rpm-pgp-preparing-rpm">
        <title>Preparing RPM</title>
        <indexterm>
          <primary>PGP!signatures!configuring RPM for</primary>
          <secondary></secondary>
          <tertiary></tertiary>
        </indexterm>

        <para>
          RPM's configuration process is quite straightforward.  It consists of
          adding a few <filename>rpmrc</filename> entries in a file of your
          choice.  For more information on rpmrc files in general, please see
          Appendix <xref linkend="ch-rpmrc-file">.
        </para>
        <para>
          The entries that need to be added to an rpmrc file are:

          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <command>signature</command>
              </para>
            </listitem>

            <listitem>
              <para>
                <command>pgp_name</command>
              </para>
            </listitem>

            <listitem>
              <para>
                <command>pgp_path</command>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Let's check out the entries.
        </para>

        <sect3 id="s3-rpm-pgp-signature-entry">
          <title><command>signature</command></title>

          <para>
            The <command>signature</command> entry is used to select the type of
            signature that RPM is to use.  At the time this book was written,
            the only legal value is <command>pgp</command>.  So you would enter:

            <figure id="sc-rpm-pgp-signature-example">
              <title>The <command>signature</command> Entry In Action</title>
              <screen width="60">
<computeroutput>
signature: pgp
</computeroutput>
              </screen>
            </figure>
          </para>
        </sect3>

        <sect3 id="s3-rpm-pgp-pgp-name-entry">
          <title><command>pgp_name</command></title>

          <para>
            The <command>pgp_name</command> entry gives RPM the user ID of the
            key it is to sign packages with.  In our key generation example, the
            user ID of the key we created was <userinput>Example Key for RPM
            Book</userinput>, so this is what our entry should look like:

            <figure id="sc-rpm-pgp-pgp-name-example">
              <title>The <command>pgp_name</command> Entry</title>
              <screen width="60">
<computeroutput>
pgp_name: Example Key for RPM Book
</computeroutput>
              </screen>
            </figure>
          </para>
        </sect3>

        <sect3 id="s3-rpm-pgp-pgp-path-entry">
          <title><command>pgp_path</command></title>

          <para>
            The <command>pgp_path</command> entry is used to define the path to
            the directory where the keys are kept.  This entry is not needed if
            the environment variable <envar>PGPPATH</envar> has been defined.
            In our example, we didn't move them from PGP's default location,
            which is in the subdirectory <filename>.pgp</filename>, off the
            user's login directory.  Since we generated the key as
            <filename>root</filename>, our path is
            <filename>/root/.pgp</filename>.  Therefore, our entry would look
            like this:

            <figure id="sc-rpm-pgp-pgp-entry-example">
              <title>Example of the <command>pgp_path</command> Entry</title>
              <screen width="60">
<computeroutput>
pgp_path: /root/.pgp
</computeroutput>
              </screen>
            </figure>
          </para>
          <para>
            And that's it.  Now it's time to sign some packages.
          </para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="s1-rpm-pgp-signing-packages">
      <title>Signing Packages</title>
      <indexterm>
        <primary>PGP!signatures!signing packages</primary>
        <secondary></secondary>
        <tertiary></tertiary>
      </indexterm>

      <para>
        There are three different ways to sign a package:

        <orderedlist>
          <listitem>
            <para>
              Signing a package at build-time.
            </para>
          </listitem>

          <listitem>
            <para>
              Replacing the signature on an already-existing package.
            </para>
          </listitem>

          <listitem>
            <para>
              Adding a signature to an already-existing package.
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        Lets take a look at each one, starting with build-time signing.
      </para>

      <sect2 id="s2-rpm-pgp-sign-option">
        <title>
          <command>--sign</command> --- Sign a Package At Build-Time
        </title>
        <indexterm>
          <primary><command>--sign</command> option</primary>
        </indexterm>

        <para>
          The <command>--sign</command> option is used to sign a package as it
          is being built.  When this option is added to an RPM build command,
          RPM will ask for your PGP pass phrase.  If the pass phrase is correct,
          the build will proceed.  If not, the build stops immediately.
        </para>
        <para>
          Here's an example of <command>--sign</command> in action:

          <figure id="sc-rpm-pgp-sign-option-example">
            <title>The <command>--sign</command> Option</title>
            <screen width="60">
<prompt># </prompt><userinput>rpm -ba --sign blather-7.9.spec</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
* Package: blather
&hellip;
Binary Packaging: blather-7.9-1
Finding dependencies...
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/RPMS/i386/blather-7.9-1.i386.rpm
&hellip;
Source Packaging: blather-7.9-1
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/SRPMS/blather-7.9-1.src.rpm
</computeroutput>
<prompt># </prompt>
            </screen>
          </figure>
        </para>
        <para>
          Once the pass phrase is entered, there's very little that is different
          from a normal build.  The only obvious difference is the
          <computeroutput>Generating signature</computeroutput> message in both
          the binary and source packaging sections.  The number following the
          message indicates that the signature added was created using PGP.
          <footnote>
            <para>
              The list of possible signature types can be found in the RPM
              sources, specifically <filename>signature.h</filename> in RPM's
              <filename>lib</filename> subdirectory.
            </para>
          </footnote>
        </para>
        <para>
          Notice, that since RPM only signs the source and binary package files,
          only the <command>-bb</command>, and <command>-ba</command> options
          make any sense when used with <command>--sign</command>.  This is due
          to the fact that only the <command>-bb</command> and
          <command>-ba</command> options create package files.
        </para>
        <para>
          If we issue a quick signature check using RPM's
          <command>--checksig</command> option, we can see that there is, in
          fact, a PGP signature present:

          <figure id="sc-rpm-pgp-checksig-example">
            <title>
              Using the <command>--checksig</command> Option to Confirm
              That a Package Has Been Signed
            </title>
            <screen width="60">
<prompt># </prompt><userinput>rpm --checksig blather-7.9-1.i386.rpm</userinput>
<computeroutput>
blather-7.9-1.i386.rpm: size pgp md5 OK
</computeroutput>
<prompt>#</prompt>
            </screen>
          </figure>
        </para>
        <para>
          It's clear to see that, in addition to the usual size and MD5
          signatures, the package has a PGP signature.
        </para>

        <sect3 id="s3-rpm-pgp-multiple-builds">
          <title>Multiple Builds?  No Problem!</title>
          <indexterm>
            <primary><command>--sign</command> option!using with multiple builds</primary>
            <secondary></secondary>
          </indexterm>

          <para>
            You might be wondering how the <command>--sign</command> option
            would work if more than one package is to be built.  Do you have to
            enter the pass phrase for every single package you build?  The
            answer is no, as long as you build the packages with a single RPM
            command.  Here's an example:

            <figure id="sc-rpm-pgp-multi-build-sign">
              <title>
                Using the <command>--sign</command> Option When Building
                Multiple Packages
              </title>
              <screen width="60">
<prompt># </prompt><userinput>rpm -ba --sign b*.spec</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
* Package: blather
&hellip;
Binary Packaging: blather-7.9-1
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/RPMS/i386/blather-7.9-1.i386.rpm
&hellip;
Source Packaging: blather-7.9-1
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/SRPMS/blather-7.9-1.src.rpm
&hellip;
* Package: bother
&hellip;
Binary Packaging: bother-3.5-1
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/RPMS/i386/bother-3.5-1.i386.rpm
&hellip;
Source Packaging: bother-3.5-1
&hellip;
Generating signature: 1002
Wrote: /usr/src/redhat/SRPMS/bother-3.5-1.src.rpm
</computeroutput>
<prompt># </prompt>
              </screen>
            </figure>
          </para>
          <para>
            Using the <command>--sign</command> option makes it as easy to sign
            one package as it is to sign one hundred.  But what happens if you
            need to change your public key?  Will you need to rebuild every
            single one of your packages just to update the signature?
          </para>
        </sect3>
      </sect2>

      <sect2 id="s2-rpm-pgp-resign-option">
        <title>
          <command>--resign</command> -- Replace a Package's Signature(s)
        </title>
        <indexterm>
          <primary><command>--resign</command> option</primary>
        </indexterm>

        <para>
          As we mentioned at the end of the previous section, from time to time
          it may be necessary to change your public key.  Certainly this would
          be necessary if your key's security was compromised, but other, more
          mundane situations might require this.
        </para>
        <para>
          Fortunately, RPM has an option that permits you to replace the
          signature on an already-built package, with a new one.  The option is
          called <command>--resign</command>, and here's an example of its use:

          <figure id="sc-rpm-pgp-resign-exampe">
            <title>An Example of the <command>--resign</command> Option</title>
            <screen width="60">
<prompt># </prompt><userinput>rpm --resign blather-7.9-1.i386.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
</computeroutput>
<prompt>#</prompt>
            </screen>
          </figure>
        </para>
        <para>
          While the output is not as exciting as a package build, the
          <command>--resign</command> option can be a life-saver if you need to
          change a package's signature, and you don't want to rebuild.
        </para>
        <para>
          As you might have guessed, the <command>--resign</command> option
          works properly on multiple package files:

          <figure id="sc-rpm-pgp-multi-resigns">
            <title>
              Resigning Multiple Packages With the <command>--resign</command>
              Option
            </title>
            <screen width="60">
<prompt># </prompt><userinput>rpm --resign b*.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
bother-3.5-1.i386.rpm:
</computeroutput>
<prompt>#</prompt>
            </screen>
          </figure>
        </para>

        <sect3 id="s3-rpm-pgp-resign-limitations">
          <title>There Are Limits, However&hellip;</title>
          <indexterm>
            <primary><command>--resign</command> option!limitations to</primary>
            <secondary></secondary>
          </indexterm>

          <para>
            Unfortunately, older package files cannot be re-signed.  The package
            file must be in version 3 format, at least.  If you attempt to
            resign a package that is too old, here's what you'll see:

            <figure id="sc-rpm-pgp-resign-too-old">
              <title>Attempting to Re-sign a Too-Old Package</title>
              <screen width="60">
<prompt># </prompt><userinput>rpm --resign blah.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blah.rpm:
blah.rpm: Can't re-sign v2.0 RPM
</computeroutput>
<prompt>#</prompt>
              </screen>
            </figure>
          </para>
          <para>
            Not sure what version your package files are at?  Just use the
            <command>file</command> command to check:

            <figure id="sc-rpm-pgp-file-command-example">
              <title>
                Using the <command>file</command> Command to Determine a Package
                File's Format
              </title>
              <screen width="60">
<prompt># </prompt><userinput>file blather-7.9-1.i386.rpm</userinput>
<computeroutput>
blather-7.9-1.i386.rpm: RPM v3 bin i386 blather-7.9-1
</computeroutput>
<prompt>#</prompt>
              </screen>
            </figure>
          </para>
          <para>
            The "<computeroutput>v3</computeroutput>" in
            <command>file</command>'s output indicates the package file format.
          </para>
        </sect3>
      </sect2>

      <sect2 id="s2-rpm-pgp-addsign-option">
        <title>
          <command>--addsign</command> -- Add a Signature To a Package
        </title>
        <indexterm>
          <primary><command>--addsign</command> option</primary>
        </indexterm>

        <para>
          The <command>--addsign</command> option, as the name suggests, is used
          to add another signature to the package.  It's pretty easy to see why
          someone would want to have a package that had been signed by the
          package builders.  But what reason would there be for
          <emphasis>adding</emphasis> a signature to a package?
        </para>
        <para>
          One reason to have more than one signature on a package would be to
          provide a means of documenting the path of ownership from the package
          builder to the end-user.
        </para>
        <para>
          As an example, the division of a company creates a package and signs
          it with the division's key.  The company's headquarters then checks
          the package's signature and adds the corporate signature to the
          package, in essence stating that the signed package received by them
          is authentic.
        </para>
        <para>
          Continuing the example, the doubly-signed package makes its way to a
          retailer.  The retailer checks the package's signatures and, when they
          check out, adds their signature to the package.
        </para>
        <para>
          The package now makes its way to a company that wishes to deploy the
          package.  After checking every signature on the package, they know
          that it is an authentic copy, unchanged since it was first created.
          Depending on the deploying company's internal controls, they may
          choose to add their own signature, thereby reassuring their employees
          that the package has received their corporate "blessing".
        </para>
        <para>
          After this lengthy example, the actual output from the
          <command>--addsign</command> option is a bit anti-climactic:

          <figure id="sc-rpm-pgp-addsign-example">
            <title>Using the <command>--addsign</command> Option</title>
            <screen width="60">
<prompt># </prompt><userinput>rpm --addsign blather-7.9-1.i386.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
</computeroutput>
<prompt>#</prompt>
            </screen>
          </figure>
        </para>
        <para>
          If we check the signatures of this package, we'll be able to see the
          multiple signatures:

          <figure id="sc-rpm-pgp-addsign-multi">
            <title>Using the <command>--checksig</command> Option</title>
            <screen width="60">
<prompt># </prompt><userinput>rpm --checksig blather-7.9-1.i386.rpm</userinput>
<computeroutput>
blather-7.9-1.i386.rpm: size pgp pgp md5 OK
</computeroutput>
<prompt>#</prompt>
            </screen>
          </figure>
        </para>
        <para>
          The two <computeroutput>pgp</computeroutput>'s in
          <command>--checksig</command>'s output clearly shows that the package
          has been signed twice.
        </para>

        <sect3 id="s3-rpm-pgp-addsign-caveats">
          <title>A Few Caveats</title>
          <indexterm>
            <primary><command>--addsign</command> option!limitations to</primary>
            <secondary></secondary>
          </indexterm>

          <para>
            As with the <command>--resign</command> option, the
            <command>--addsign</command> option cannot do its magic on pre-V3
            package files:

            <figure id="sc-rpm-pgp-addsign-too-old">
              <title>
                Attempting to Use <command>--addsign</command> On a Too-Old
                Package
              </title>
              <screen width="60">
<prompt># </prompt><userinput>rpm --addsign blah.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blah.rpm:
blah.rpm: Can't re-sign v2.0 RPM
</computeroutput>
<prompt>#</prompt>
              </screen>
            </figure>
          </para>
          <para>
            OK, the error message may not be 100% accurate, but you get the
            idea.
          </para>
          <para>
            Another thing to be aware of is that the
            <command>--addsign</command> option does not check for multiple
            identical signatures.  Although it doesn't make much sense to do so,
            RPM will happily let you add the same signature as many times as
            you'd like:

            <figure id="sc-rpm-pgp-multiple-addsigns">
              <title>Using <command>--addsign</command> More Than Once</title>
              <screen width="60">
<prompt># </prompt><userinput>rpm --addsig blather-7.9-1.i386.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
</computeroutput>
<prompt># </prompt><userinput>rpm --addsig blather-7.9-1.i386.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
</computeroutput>
<prompt># </prompt><userinput>rpm --addsig blather-7.9-1.i386.rpm</userinput>
<prompt>Enter pass phrase: </prompt><userinput>&lt;passphrase&gt;</userinput> (Not echoed)
<computeroutput>

Pass phrase is good.
blather-7.9-1.i386.rpm:
</computeroutput>
<prompt># </prompt><userinput>rpm --checksig blather-7.9-1.i386.rpm</userinput>
<computeroutput>
blather-7.9-1.i386.rpm: size pgp pgp pgp pgp md5 OK
</computeroutput>
<prompt>#</prompt>
              </screen>
            </figure>
          </para>
          <para>
            As we can see from <command>--checksig</command>'s output, the
            package now has four identical signatures.  Maybe this is the
            digital equivalent of pressing down extra hard while writing your
            name&hellip;
          </para>
        </sect3>
      </sect2>
    </sect1>
  </chapter>
