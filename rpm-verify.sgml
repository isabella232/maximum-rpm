<chapter id="ch-rpm-verify">
<title>Using RPM to Verify Installed Packages</title>
<!-- label: verify-chapter -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?></primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<table id="tb-rpm-verify-">
<title>*** Enter New Title Here ***</title>
{|l|l|c|}

\multicolumn{3}{|l|}{\LARGE{<tt?>rpm -V</tt?> \small{(\textrm{or}
<tt?>--verify, or -y)</tt?>} \normalsize{<emphasis>options</emphasis>}}}




\multicolumn{2}{|c|}{Package Selection Options} & Page

pkg1 &hellip;\ pkgN & Verify named package(s)
&<xref linkend="verify-pkg-name">

 <tt?>-p <emphasis>&lt;file&gt;</tt?></emphasis> & Verify against package file
<tt?><emphasis>&lt;file&gt;</tt?></emphasis> & <xref linkend="verify-p">

<tt?>-f <emphasis>&lt;file&gt;</tt?></emphasis> & Verify package owning <tt?><emphasis>&lt;file&gt;</tt?></emphasis> &
<xref linkend="verify-f"> 

<tt?>-a</tt?> & Verify all installed packages & <xref linkend="verify-a">

<tt?>-g <emphasis>&lt;group&gt;</tt?></emphasis> & Verify packages belonging to group
<tt?><emphasis>&lt;group&gt;</tt?></emphasis> & <xref linkend="verify-g">



\multicolumn{2}{|c|}{Verify---specific Options} & Page


<tt?>--noscripts</tt?> & Do not execute verification script &
<xref linkend="verify--noscripts">

<tt?>--nodeps</tt?> & Do not verify dependencies &
<xref linkend="verify--nodeps">

<tt?>--nofiles</tt?> & Do not verify file attributes &
<xref linkend="verify--nofiles">



\multicolumn{2}{|c|}{General Options} & Page


<tt?>-v</tt?> & Display additional information & <xref linkend="verify-v">

<tt?>-vv</tt?> & Display debugging information & <xref linkend="verify-vv">

<tt?>--root <emphasis>&lt;path&gt;</tt?></emphasis> & Set alternate root to
<tt?><emphasis>&lt;path&gt;</tt?></emphasis> & <xref linkend="verify--root">

<tt?>--rcfile <emphasis>&lt;rcfile&gt;</tt?></emphasis> & Set alternate rpmrc file to
<tt?><emphasis>&lt;rcfile&gt;</tt?></emphasis> & <xref linkend="verify--rcfile">

<tt?>--dbpath <emphasis>&lt;path&gt;</tt?></emphasis> & Use <tt?><emphasis>&lt;path&gt;</tt?></emphasis> to find the
RPM database & <xref linkend="verify--dbpath">


</table>
<sect1 id="s1-rpm-verify-">
<title><tt?>rpm -V</tt?> --- What Does it Do?</title>
<!-- label: rpm-V -->
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!what it does</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

From time to time, it's necessary to make sure that everything on your
system is "OK".  Are you sure the packages you've installed are
still configured properly?  Have there been any changes made that you don't
know about?  Did you mistakenly start a recursive delete in <tt?>/usr</tt?>
and now have to assess the damage?

RPM can help.  It can alert you to changes made to any of the files
installed by RPM.  Also, if a package requires capabilities provided by
another package, it can make sure the other package is installed, too.

The command <tt?>rpm -V</tt?> (The options <tt?>-y</tt?> and
<tt?>--verify</tt?> are equivalent) verifies an installed package.  Before
we see how this is done, let's take a step back and look at the big
picture.

Every time a package is installed, upgraded, or erased, the changes are
logged in RPM's database.  It's necessary for RPM to keep track of this
information; otherwise it wouldn't be able to perform these operations
correctly.  You can think of the RPM database (and the disk space it
consumes) as being the "price of admission" for the easy package
management that RPM provides.
<footnote>
<para>
Actually, the price is fairly low.
For a completely RPM-based Linux distribution, it would be unusual to have
a database over 5MB in size.
</para>
</footnote>

The RPM database reflects the configuration of the system on which it
resides.  When RPM accesses the database to see how files should be
manipulated during an install, upgrade, or erase, it is using the database
as a mirror of the system's configuration.

However, we can also use the system configuration as a mirror of the RPM
database.  What does this "backward" view give us?  What purpose would be
served?

The purpose would be to see if the system configuration accurately
reflects the contents of the RPM database.  If the system configuration
<emphasis>doesn't</emphasis> match the database, then we can reach one of two
conclusions:

<orderedlist>
<listitem>
<para>
The RPM database has become corrupt.  The system configuration is
unchanged.

</para>
</listitem>

<listitem>
<para>
The RPM database is intact.  The system configuration has changed.

</para>
</listitem>

</orderedlist>
While it would be foolish to state that an RPM database has <emphasis>never</emphasis>
become corrupt, it is a sufficiently rare occurrence that the second
conclusion is much more likely.  So RPM gives us a powerful verification
tool, essentially for free.

<sect2 id="s2-rpm-verify-">
<title>What Does it Verify?</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!what it verifies</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

It would be handy if RPM did nothing more than verify that every file
installed by a package actually exists on your system.  In reality, RPM
does much more.  It makes sure that if a package depends on other packages
to provide certain capabilities, the necessary packages are, in fact,
installed.  If the package builder created one, RPM will also run a special
verification script that can verify aspects of the package's installation
that RPM cannot.

Finally, every file installed by RPM is examined.  No less than <emphasis>nine</emphasis>
different attributes of each file can be checked.  Here is the list of
attributes:

<itemizedlist mark="bullet">
<listitem>
<para>
Owner

</para>
</listitem>

<listitem>
<para>
Group

</para>
</listitem>

<listitem>
<para>
Mode

</para>
</listitem>

<listitem>
<para>
MD5 Checksum

</para>
</listitem>

<listitem>
<para>
Size

</para>
</listitem>

<listitem>
<para>
Major Number

</para>
</listitem>

<listitem>
<para>
Minor Number

</para>
</listitem>

<listitem>
<para>
Symbolic Link String

</para>
</listitem>

<listitem>
<para>
Modification Time

</para>
</listitem>

</itemizedlist>
Let's take a look at each of these attributes and why they are good things
to check:

<sect3 id="s3-rpm-verify-">
<title>File Ownership</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file ownership</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Most operating systems today keep track of each file's creator.  This is
done primarily for resource accounting.  Linux and UNIX also use file
ownership to help determine access rights to the file.  In addition, some
files, when executed by a user, can temporarily change the user's
ID, normally to a more privileged ID. Therefore, any change of file
ownership may have far reaching effects on data security and system
availability.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file ownership|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>File Group</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file group</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

In a similar manner to file ownership, a "group" specification is
attached to each file.  Primarily used for determining access rights, a
file's group specification can also become a user's group ID, should that
user execute the file's contents.  Therefore, any changes in a file's group
specification are important, and should be monitored.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file group|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>File Mode</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file mode</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Encompassing the file's "permissions", the mode is a set of bits
that specifies permitted access for the file's owner, group members, and
everyone else.  Even more important are two additional bits that determine
whether a user's group or user ID should be changed if they execute the
program contained in the file.  Since these little bombshells can let any
user become <tt?>root</tt?> for the duration of the program, it pays to be
extra careful with a file's permissions.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file mode|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>MD5 Checksum</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!MD5 checksum</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

The MD5 checksum of a file is simply a 128-bit number that is
mathematically derived from the contents of the file.  The MD5 algorithm
was designed by Ron Rivest, the "R" in the popular RSA public-key
encryption algorithm.  The "MD" in "MD5" stands for <emphasis>Message
Digest</emphasis>, which is a pretty accurate description of what it does.

Unlike literary digests, an MD5 checksum conveys no information about the
contents of the original file.  However, it possesses one unique trait:

<itemizedlist mark="bullet">
<listitem>
<para>
<emphasis>Any</emphasis> change to the file, no matter how small, results in a
change to the MD5 checksum.
<footnote>
<para>
From a strictly theoretical standpoint,
this is not entirely true.  Using the lingo of cryptologists, it is
believed to be "computationally infeasible" to find two messages that
produce the same MD5 checksum.
</para>
</footnote>

</para>
</listitem>

</itemizedlist>
RPM creates MD5 checksums of all files it manipulates, and stores them in
its database.  For all intents and purposes, if one of these files is
changed, the MD5 checksum will change, and RPM will detect it.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!MD5 checksum|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>File Size</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file size</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

As if the use of MD5 isn't enough, RPM also keeps track of file sizes.  A
difference of even one byte more or less will not go unnoticed.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!file size|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>Major Number</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!major number</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Device character and block files possess a major number.  The major number
is used to communicate information to the device driver associated with the
special file.  For instance, under Linux the special files for SCSI disk
drives should have a major number of 8, while the major number for an IDE
disk drive's special file would be 3.  As you can imagine, any change to a
file's major number can have disastrous effects, and is tracked by RPM.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!major number|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>Minor Number</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!minor number</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

A file's minor number is similar in concept to the major number, but
conveys different information to the device driver.  In the case of disk
drives, this information can consist of a unit identifier.  Should the
minor number change, RPM will detect it.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!minor number|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>Symbolic Link</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!symbolic link</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

If the file in question is really a symbolic link, the text string
containing the name of the linked-to file is checked.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!symbolic link|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title>Modification Time</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!modification time</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Most operating systems keep track of the date and time that a file was last
modified.  RPM uses this to its advantage by keeping modification times in
its database.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!attributes verified!modification time|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!what it verifies|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!what it does|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

</sect2>

</sect1>

<sect1 id="s1-rpm-verify-">
<title>When Verification Fails - <tt?>rpm -V</tt?> Output</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!output of</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

When verifying a package, RPM produces output <emphasis>only</emphasis> if there is a
verification failure.  When a file fails verification, the format of the
output is a bit cryptic, but it packs all the information you need into one
line per file.  Here is the format:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
SM5DLUGT c <emphasis>file</emphasis>
</screen>
</figure>
Where:

<itemizedlist mark="bullet">
<listitem>
<para>
<tt?>S</tt?> is the file size.

</para>
</listitem>

<listitem>
<para>
<tt?>M</tt?> is the file's mode.

</para>
</listitem>

<listitem>
<para>
<tt?>5</tt?> is the MD5 checksum of the file.

</para>
</listitem>

<listitem>
<para>
<tt?>D</tt?> is the file's major and minor numbers.

</para>
</listitem>

<listitem>
<para>
<tt?>L</tt?> is the file's symbolic link contents.

</para>
</listitem>

<listitem>
<para>
<tt?>U</tt?> is owner of the file.

</para>
</listitem>

<listitem>
<para>
<tt?>G</tt?> is the file's group.

</para>
</listitem>

<listitem>
<para>
<tt?>T</tt?> is the modification time of the file.

</para>
</listitem>

<listitem>
<para>
<tt?>c</tt?> appears only if the file is a configuration file.

<indexterm>
<primary>config files</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->
  This is
handy for quickly identifying config files, as they are very likely to
change, and therefore, very <emphasis>unlikely</emphasis> to verify successfully.

</para>
</listitem>

<listitem>
<para>
<tt?><emphasis>file</tt?></emphasis> is the file that failed verification.  The
complete path is listed to make it easy to find.

</para>
</listitem>

</itemizedlist>
It's unlikely that <emphasis>every</emphasis> file attribute will fail to verify, so each
of the eight attribute flags will only appear if there is a problem.
Otherwise, a "<tt?>.</tt?>" will be printed in that flag's place.  Let's
look at an example or two:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
.M5....T   /usr/X11R6/lib/X11/fonts/misc/fonts.dir
</screen>
</figure>
In this case, the mode, MD5 checksum, and modification time for the
specified file have failed to verify.  The file is not a config file (Note
the absence of a "<tt?>c</tt?>" between the attribute list and the
filename).

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
S.5....T c /etc/passwd
</screen>
</figure>
Here, the size, checksum, and modification time of the system password file
have all changed.  The "<tt?>c</tt?>" indicates that this is a config file.

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
missing    /var/spool/at/spool
</screen>
</figure>
This last example illustrates what RPM does when a file, that should be
there, is missing entirely.

<sect2 id="s2-rpm-verify-">
<title>Other Verification Failure Messages</title>
When <tt?>rpm -V</tt?> finds other problems, the output is a bit easier to
understand:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -V blather</userinput>
Unsatisfied dependencies for blather-7.9-1: bother &gt;= 3.1
#
</screen>
</figure>
It's pretty easy to see that the <tt?>blather</tt?> package requires at least
version 3.1 of the <tt?>bother</tt?> package.

The output from a package's verification script is a bit harder to
categorize, as the script's contents, as well as its messages, are entirely
up to the package builder.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!output of|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect2>

</sect1>

<sect1 id="s1-rpm-verify-">
<title>Selecting What to Verify, and How</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!options</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

There are several ways to verify packages installed on your system.  If
you've taken a look at RPM's query command, you'll find that many of them
are similar.  Let's start with the simplest method of specifying packages
--- the package label.

<sect3 id="s3-rpm-verify-">
<title>The Package Label --- Verify an Installed Package Against the RPM Database</title>
<!-- label: verify-pkg-name -->
<indexterm>
<primary>package label</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

You can simply follow the <tt?>rpm -V</tt?> command with all or part of a
package label.  As with every other RPM command that accepts package
labels, you'll need to carefully specify each part of the label you
include.  Keep in mind that package names are case-sensitive, so
<tt?>rpm -V PackageName</tt?> and <tt?>rpm -V packagename</tt?> are <emphasis>not</emphasis>
the same.  Let's verify the <tt?>initscripts</tt?> package:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -V initscripts</userinput>
# 
</screen>
</figure>
While it looks like RPM didn't do anything, the following steps were
performed:

<itemizedlist mark="bullet">
<listitem>
<para>
For every file in the package, RPM checked the nine file attributes
that were discussed above.

</para>
</listitem>

<listitem>
<para>
If the package was built with dependencies, the RPM database was
searched to ensure the packages that satisfy those dependencies were
installed.

</para>
</listitem>

<listitem>
<para>
If the package was built with a verification script, that script was
executed.

</para>
</listitem>

</itemizedlist>
In our example, each of these steps was performed without error --- the
package verified successfully.  Remember, with <tt?>rpm -V</tt?> you'll only
see output if a package fails to verify.

<indexterm>
<primary>package label|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-a</tt?> --- Verify All Installed Packages Against the RPM Database</title>
<!-- label: verify-a -->
<indexterm>
<primary>a@<tt?>-a</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

If you add <tt?>-a</tt?> to <tt?>rpm -V</tt?>, you can easily verify every
installed package on your system.  It might take a while, but when it's
done, you'll know exactly what's been changed on your system:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Va</userinput>
.M5....T   /usr/X11R6/lib/X11/fonts/misc/fonts.dir
missing    /var/spool/at/.lockfile
missing    /var/spool/at/spool
S.5....T   /usr/lib/rhs/glint/icon.pyc
..5....T c /etc/inittab
..5.....   /usr/bin/loadkeys
#
</screen>
</figure>
Don't be too surprised if <tt?>rpm -Va</tt?> turns up a surprising number of
files that failed verification.  RPM's verification process is <emphasis>very</emphasis>
strict!  In many cases, the changes flagged don't indicate problems
--- they are only an indication of your system's configuration being
different than what the builders of the installed packages had on
<emphasis>their</emphasis> system.  Also, some attributes change during normal system
operation.  However, it would be wise to check into each verification
failure, just to make sure.

<indexterm>
<primary>a@<tt?>-a</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-f <emphasis>&lt;file&gt;</tt?></emphasis> --- Verify the Package Owning <tt?><emphasis>&lt;file&gt;</tt?></emphasis> Against the RPM Database</title>
<!-- label: verify-f -->
<indexterm>
<primary>f@<tt?>-f</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Imagine this: you're hard at work when a program you've used a million
times before suddenly stops working.  What do you do?  Well, before using
RPM, you probably tried to find other files associated with that program
and see if they had changed recently.

Now you can let RPM do at least part of that sleuthing for you.  Simply
direct RPM to verify the package owning the ailing program:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
% <userinput>rpm -Vf /sbin/cardmgr</userinput>
S.5....T c /etc/sysconfig/pcmcia
</screen>
</figure>
Hmmmm.  Looks like a config file was recently changed.

This isn't to say that using RPM to verify a package will always get you
out of trouble, but it's such a quick step it should be one of the first
things you try.  Here's an example of <tt?>rpm -Vf</tt?> not working out as
well:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
% <userinput>rpm -Vf /etc/blunder</userinput>
file /etc/blunder is not owned by any package
</screen>
</figure>
(Note that the issue surrounding RPM and symbolic links mentioned in "A
Tricky Detail" (page <xref linkend="-f:tricky">) also applies to <tt?>rpm
-Vf</tt?>.  Watch those symlinks!)

<indexterm>
<primary>f@<tt?>-f</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-p <emphasis>&lt;file&gt;</tt?></emphasis> --- Verify Against a Specific Package File</title>
<!-- label: verify-p -->
<indexterm>
<primary>p@<tt?>-p</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Unlike the previous options to <tt?>rpm -V</tt?>, each of which verified one
or more packages against RPM's database, the <tt?>-p</tt?> option performs
the same verification, but against a package file.  Why on earth would you
want to do this when the RPM database is sitting there just waiting to be
used?

Well, what if you didn't <emphasis>have</emphasis> an RPM database?  While it isn't a
common occurrence, power failures, hardware problems, and inadvertent
deletions (along with non-existent backups) can leave your system "sans
database".  Then your system hiccups --- what do you do now?

This is where a CD full of package files can be worth its weight in gold.
Simply mount the CD and verify to your heart's content:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vp /mnt/cdrom/RedHat/RPMS/i386/adduser-1.1-1.i386.rpm</userinput>
#
</screen>
</figure>
Whatever else might be wrong with this system, at least we can add new
users.  But what if you have <emphasis>many</emphasis> packages to verify?  It would be a
very slow process doing it one package at a time.  That's where the next
option comes in handy&hellip;

<indexterm>
<primary>p@<tt?>-p</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-g <emphasis>&lt;group&gt;</tt?></emphasis> --- Verify Packages Belonging To <tt?><emphasis>&lt;group&gt;</tt?></emphasis></title>
 <!-- label: verify-g -->
<indexterm>
<primary>g@<tt?>-g</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

When a package is built, the package builder must classify the package,
grouping it with other packages that perform similar functions.  RPM gives
you the ability to verify installed packages based on their groups.  For
example, there is a group known as <tt?>Shells</tt?>.  This group consists of
packages that contain, strangely enough, shells.  Let's verify the proper
installation of every shell-related package on the system:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vg Shells</userinput>
missing    /etc/bashrc
#
</screen>
</figure>
One thing to keep in mind is that group specifications are case-sensitive.
Issuing the command <tt?>rpm -Vg shells</tt?> wouldn't verify many packages:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vg shells</userinput>
group shells does not contain any packages
#
</screen>
</figure>
<indexterm>
<primary>g@<tt?>-g</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--nodeps</tt?>: Do Not Check Dependencies Before Erasing Package</title>
<!-- label: verify--nodeps -->
<indexterm>
<primary>nodeps@<tt?>--nodeps</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

When the <tt?>--nodeps</tt?> option is added to a verify command, RPM will
bypass its dependency verification processing.  In this example, we've
added the <tt?>-vv</tt?> option to so we can watch RPM at work:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv rpm</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 2341208
D: dependencies: looking for libz.so.1
D: dependencies: looking for libdb.so.2
D: dependencies: looking for libc.so.5
#
</screen>
</figure>
As we can see, there are three different capabilities that the <tt?>rpm</tt?>
package requires:

<itemizedlist mark="bullet">
<listitem>
<para>
<tt?>libz.so.1</tt?>

</para>
</listitem>

<listitem>
<para>
<tt?>libdb.so.2</tt?>

</para>
</listitem>

<listitem>
<para>
<tt?>libc.so.5</tt?>

</para>
</listitem>

</itemizedlist>
If we add the <tt?>--nodeps</tt?> option, the dependency verification of
the three capabilities is no longer performed:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv --nodeps rpm</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 2341208
#
</screen>
</figure>
The line <tt?>D: verifying record number 2341208</tt?> indicates that RPM's
normal file-based verification proceeded normally.

<indexterm>
<primary>nodeps@<tt?>--nodeps</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--noscripts</tt?>: Do Not Execute Verification Script</title>
<!-- label: verify--noscripts -->
<indexterm>
<primary>noscripts@<tt?>--noscripts</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Adding the <tt?>--noscripts</tt?> option to a verify command prevents
execution of the verification scripts of each package being verified.  In
the following example, the package verification script is executed:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv bother</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 616728
D: verify script found - running from file /var/tmp/rpm-321.vscript
+ PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin
+ export PATH
+ echo This is the bother 3.5 verification script
This is the bother 3.5 verification script
#
</screen>
</figure>
While the actual script is not very interesting, it did execute when the
package was being verified.  In the next example, we'll use the
<tt?>--noscripts</tt?> option to prevent its execution:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv --noscripts bother</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 616728
#
</screen>
</figure>
As expected, the output is identical to the prior example --- minus the
lines dealing with the verification script, of course.

<indexterm>
<primary>noscripts@<tt?>--noscripts</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--nofiles</tt?>: Do Not Verify File Attributes</title>
<!-- label: verify--nofiles -->
<indexterm>
<primary>nofiles@<tt?>--nofiles</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

The <tt?>--nofiles</tt?> option disables RPM's file-related verification
processing.  When this option is used, only the verification script and
dependency verification processing are performed.  In this example, the
package has a file-related verification problem:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv bash</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 279448
D: dependencies: looking for libc.so.5
D: dependencies: looking for libtermcap.so.2
missing    /etc/bashrc
#
</screen>
</figure>
When the <tt?>--nofiles</tt?> option is added, the missing file doesn't
cause a message any more:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv --nofiles bash</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 279448
D: dependencies: looking for libc.so.5
D: dependencies: looking for libtermcap.so.2
#
</screen>
</figure>
This is not to say that the missing file problem is solved, just that no
file verification was performed.

<indexterm>
<primary>nofiles@<tt?>--nofiles</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-v</tt?> --- Display Additional Information</title>
<!-- label: verify-v -->
<indexterm>
<primary>v@<tt?>-v</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Although RPM won't report an error with the command syntax if you include
the <tt?>-v</tt?> option, you won't see much in the way of additional output:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vv bash</userinput>
#
</screen>
</figure>
Even if there are verification errors, adding <tt?>-v</tt?> won't change the
output:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vv apmd</userinput>
S.5....T   /etc/rc.d/init.d/apm
S.5....T   /usr/X11R6/bin/xapm
#
</screen>
</figure>
The only time that the <tt?>-v</tt?> option <emphasis>will</emphasis> produce output is
when the package being verified has a verification script.  Any normal
output from the script won't be displayed by RPM, when run without
<tt?>-v</tt?>:
<footnote>
<para>
Failure messages will always be displayed.
</para>
</footnote>

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -V bother</userinput>
#
</screen>
</figure>
But when <tt?>-v</tt?> is added, the script's non-error-related output is
displayed:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vv bother</userinput>
This is the bother 3.5 verification script
#
</screen>
</figure>
If you're looking for more insight into RPM's inner workings, you'll have
to try the next option:

<indexterm>
<primary>v@<tt?>-v</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>-vv</tt?> --- Display Debugging Information</title>
<!-- label: verify-vv -->
<indexterm>
<primary>vv@<tt?>-vv</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Sometimes it's necessary to have even <emphasis>more</emphasis> information than we can
get with <tt?>-v</tt?>.  By adding another <tt?>v</tt?>, that's just what we'll
get:

<figure id="sc-rpm-verify-">
<title>*** Enter New Title Here ***</title>
<screen width="60">
# <userinput>rpm -Vvv rpm</userinput>
D: opening database in //var/lib/rpm/
D: verifying record number 2341208
D: dependencies: looking for libz.so.1
D: dependencies: looking for libdb.so.2
D: dependencies: looking for libc.so.5
#
</screen>
</figure>
The lines starting with <tt?>D:</tt?> have been added by using <tt?>-vv</tt?>.
We can see where the RPM database is located and what record number
contains information on the <tt?>rpm-2.3-1</tt?> package.  Following that is
the list of dependencies that the <tt?>rpm</tt?> package requires.

In the vast majority of cases, it will not be necessary to use
<tt?>-vv</tt?>.  It is normally used by software engineers working on RPM
itself, and the output can change without notice.  However, it's a handy
way to gain insights into RPM.

<indexterm>
<primary>vv@<tt?>-vv</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--dbpath <emphasis>&lt;path&gt;</tt?></emphasis>: Use <tt?><emphasis>&lt;path&gt;</tt?></emphasis> To Find RPM Database</title>
<!-- label: verify--dbpath -->
<indexterm>
<primary>dbpath@<tt?>--dbpath</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

In order for RPM to do its handiwork, it needs access to an RPM database.
Normally, this database exists in the directory specified by the
<tt?>rpmrc</tt?> file entry, <tt?>dbpath</tt?>.  By default, <tt?>dbpath</tt?> is
set to <tt?>/var/lib/rpm</tt?>.

Although the <tt?>dbpath</tt?> entry can be modified in the appropriate
<tt?>rpmrc</tt?> file, the <tt?>--dbpath</tt?> option is probably a better
choice when the database path needs to be changed temporarily.  An example
of a time the <tt?>--dbpath</tt?> option would come in handy is when it's
necessary to examine an RPM database copied from another system.  Granted,
it's not a common occurrence, but it's difficult to handle any other way.

<indexterm>
<primary>dbpath@<tt?>--dbpath</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--root <emphasis>&lt;path&gt;</tt?></emphasis>: Set Alternate Root to <tt?><emphasis>&lt;path&gt;</tt?></emphasis></title>
<!-- label: verify--root -->
<indexterm>
<primary>root@<tt?>--root</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Adding <tt?>--root <emphasis>&lt;path&gt;</tt?></emphasis> to a verify command forces RPM to
assume that the directory specified by <tt?><emphasis>&lt;path&gt;</tt?></emphasis> is actually
the "root" directory.  In addition, RPM expects its database to reside in
the directory specified by the <tt?>dbpath</tt?> <tt?>rpmrc</tt?> file entry,
relative to <tt?><emphasis>&lt;path&gt;</tt?></emphasis>.
<footnote>
<para>
For more information on
<tt?>rpmrc</tt?> file entries, see Appendix <xref linkend="rpmrc-file">.
</para>
</footnote>

Normally this option is only used during an initial system install, or when
a system has been booted off a "rescue disk", and some packages need to
be re-installed in order to restore normal operation.

<indexterm>
<primary>root@<tt?>--root</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

<sect3 id="s3-rpm-verify-">
<title><tt?>--rcfile <emphasis>&lt;rcfile&gt;</tt?></emphasis>: Set Alternate <tt?>rpmrc</tt?> file to <tt?><emphasis>&lt;rcfile&gt;</tt?></emphasis></title>
<!-- label: verify--rcfile -->
<indexterm>
<primary>rcfile@<tt?>--rcfile</tt?> option</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

The <tt?>--rcfile</tt?> option is used to specify a file containing default
settings for RPM.  Normally, this option is not needed.  By default, RPM
uses <tt?>/etc/rpmrc</tt?> and a file named <tt?>.rpmrc</tt?>, located in your
login directory.

This option would be used if there was a need to switch between several
sets of RPM options.  Software developer and package builders will be the
people using <tt?>--rcfile</tt?>.  For more information on <tt?>rpmrc</tt?>
files, see Appendix <xref linkend="rpmrc-file">.

<indexterm>
<primary>rcfile@<tt?>--rcfile</tt?> option|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!options|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

</sect3>

</sect1>

<sect1 id="s1-rpm-verify-">
<title>We've Lied to You&hellip;</title>
<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!verification, control of</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

Not really; we just omitted a few details until you've had a chance to see
<tt?>rpm -V</tt?> in action.  Here are the details:

<sect4 id="s4-rpm-verify-">
<title>RPM Controls What Gets Verified</title>
Depending on the type of file being verified, RPM will not verify every
possible attribute.  Here is a table showing the attributes checked for
each of the different file types:

\vspace{10mm}

<table id="tb-rpm-verify-">
<title>*** Enter New Title Here ***</title>
\rule{0pt}{15mm}% vertical placement
File Type &
\begin{rotate}{45}File Size\end{rotate}&
\begin{rotate}{45}Mode\end{rotate}&
\begin{rotate}{45}MD5 Checksum\end{rotate}&
\begin{rotate}{45}Major Number\end{rotate}&
\begin{rotate}{45}Minor Number\end{rotate}&
\begin{rotate}{45}Symlink String\end{rotate}&
\begin{rotate}{45}Owner\end{rotate}&
\begin{rotate}{45}Group\end{rotate}&
\begin{rotate}{45}Modification Time\end{rotate}



Directory File &  & X &  &  &  &  & X & X & 

Symbolic Links &  & X &  &  &  & X & X & X & 

FIFO &  & X &  &  &  &  & X & X & 

Devices &  & X &  & X & X &  & X & X & 

Regular Files & X & X & X &  &  &  & X & X & X
</table>
</sect4>

<sect4 id="s4-rpm-verify-">
<title>The Package Builder Can Also Control What Gets Verified</title>
When a package builder creates a new package, they can control what
attributes are to be verified on a file-by-file basis.  The reasons for
excluding specific attributes from verification can be quite involved, but
here's an example just to give you the flavor:

When a person logs into a system, there are device files associated with
that user's terminal session.  In order for the terminal device (called
<tt?>tty</tt?>) to function properly, the owner and group of the device must
change to that of the person logging in.  Therefore, if RPM were to verify
the package that created the <tt?>tty</tt?> device files, any ttys that were
in use at the time would fail to verify.  However, by using the
<tt?>\<!-- verify</tt?> -->
<footnote>
<para>
See page <xref linkend="spec-verify"> for details on
<tt?>\<!-- verify</tt?> -->
</para>
</footnote>
 directive, a package builder can save you from trivial
verification failures.

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>!verification, control of|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->

<indexterm>
<primary>rpm -V@<tt?>rpm -V</tt?>|)</primary>
<secondary></secondary>
<tertiary></tertiary>
<see></see>
</indexterm>
<!--  -->
</sect4>

</sect1>

</chapter>

