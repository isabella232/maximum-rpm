  <chapter id="ch-rpm-depend">
    <title>Adding Dependency Information to a Package</title>
    <!-- label: rpm-depend -->

    <indexterm>
      <primary>dependencies</primary>
      <secondary>adding</secondary>
    </indexterm>

    <para>
      Since the very first version of RPM hit the streets, one of the side
      effects of RPM's ease of use was that it made it easier for people to
      break things.  Since RPM made it so simple to erase packages, it became
      common for people to joyfully erase packages until something broke.
    </para>
    <para>
      Usually this only bit people once, but even once was too much of a hassle
      if it could be prevented.  With this in mind, the RPM developers gave RPM
      the ability to:

      <itemizedlist mark="bullet">
        <listitem>
          <para>
            Build packages that contain information on the capabilities they
            require.
          </para>
        </listitem>

        <listitem>
          <para>
            Build packages that contain information on the capabilities they
            provide.
          </para>
        </listitem>

        <listitem>
          <para>
            Store this "provides" and "requires" information in the RPM
            database.
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      In addition, they made sure RPM was able to display dependency
      information, as well as to warn users if they were attempting to do
      something that would break a package's dependency requirements.
    </para>
    <para>
      With these features in place, it became more difficult for someone to
      unknowingly erase a package and wreak havoc on their system.
    </para>

    <sect1 id="s1-rpm-depend-overview">
      <title>An Overview of Dependencies</title>
      <indexterm>
        <primary>dependencies</primary>
        <secondary>basic concepts</secondary>
      </indexterm>

      <para>
        We've already alluded to the underlying concept for RPM's dependency
        processing.  It is based on two key factors:

        <itemizedlist mark="bullet">
          <listitem>
            <para>
              Packages advertise what capabilities they provide.
            </para>
          </listitem>

          <listitem>
            <para>
              Packages advertise what capabilities they require.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        By simply checking these two types of information, many possible
        problems can be avoided.  For example, if a package requires a
        capability that is not provided by any already-installed package, that
        package cannot be installed and expected to work properly.
      </para>
      <para>
        On the other hand, if a package is to be erased, but its capabilities
        are required by other installed packages, then it cannot be erased
        without causing other packages to fail.
      </para>
      <para>
        As you might imagine, it's not quite <emphasis>that</emphasis> simple.
        But adding dependency information can be easy.  In fact, in most cases,
        it's automatic!
      </para>
    </sect1>

    <sect1 id="s1-rpm-depend-auto-depend">
      <title>Automatic Dependencies</title>
      <indexterm>
        <primary>dependencies</primary>
        <secondary>automatically added</secondary>
      </indexterm>

      <para>
        When a package is built by RPM, if any file in the package's
        <command>%files</command> list is a shared library, the library's
        <firstterm>soname</firstterm> is automatically added to the list of
        capabilities the package provides.  The soname is the name used to
        determine compatibility between different versions of a library.
      </para>
      <para>
        Note that this is <emphasis>not</emphasis> a filename.  In fact, no
        aspect of RPM's dependency processing is based on filenames.  Many
        people new to RPM often make the assumption that a failed dependency
        represents a missing file.  This is not the case.
      </para>
      <para>
        Remember that RPM's dependency processing is based on knowing what
        capabilities are provided by a package and what capabilities a package
        requires.  We've seen how RPM automatically determines what shared
        library resources a package provides.  But does it automatically
        determine what shared libraries a package <emphasis>requires</emphasis>?
      </para>
      <para>
        Yes!  RPM does this by running <command>ldd</command> on every
        executable program in a package's <command>%files</command> list.  Since
        <command>ldd</command> provides a list of the shared libraries each
        program requires, both halves of the equation are complete &mdash; that
        is, the packages that make shared libraries available,
        <emphasis>and</emphasis> the packages that require those shared
        libraries, are tracked by RPM.  RPM can then take that information into
        account when packages are installed, upgraded, or erased.
      </para>

      <sect2 id="s2-rpm-depend-auto-depend-scripts">
        <title>The Automatic Dependency Scripts</title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary>scripts related to</secondary>
        </indexterm>

        <para>
          RPM uses two scripts to handle automatic dependency processing.  They
          reside in <filename>/usr/bin</filename> and are called
          <filename>find-requires</filename>, and
          <filename>find-provides</filename>.  We'll take a look at them in a
          minute, but first let's look at why there are scripts to do this sort
          of thing.  Wouldn't it be better to have this built into RPM itself?
        </para>
        <para>
          Actually, creating scripts for this sort of thing
          <emphasis>is</emphasis> a better idea.  The reason?  RPM has already
          been ported to a variety of different operating systems.  Determining
          what shared libraries an executable requires, and the soname of shared
          libraries, is simple, but the exact steps required vary widely from
          one operating system to another.  Putting this part of RPM into a
          script makes it easier to port RPM.
        </para>
        <para>
          Let's take a look at the scripts that are used by RPM under the Linux
          operating system.
        </para>

        <sect3 id="s3-rpm-depend-find-requires">
          <title>
            <filename>find-requires</filename> &mdash; Automatically Determine
            Shared Library Requirements
          </title>
          <indexterm>
            <primary>dependencies</primary>
            <secondary>scripts related to</secondary>
            <tertiary><filename>find-requires</filename></tertiary>
          </indexterm>

          <indexterm>
            <primary><filename>find-requires</filename> script</primary>
          </indexterm>

          <para>
            The <filename>find-requires</filename> script for Linux is quite
            simple:

            <screen width="60">
<computeroutput>
#!/bin/sh

# note this works for both a.out and ELF executables

ulimit -c 0

filelist=`xargs -r file | fgrep executable | cut -d: -f1 `

for f in $filelist; do
    ldd $f | awk '/=&gt;/ { print $1 }'
done | sort -u | xargs -r -n 1 basename | sort -u
</computeroutput>
            </screen>
          </para>

          <para>
            This script first creates a list of executable files.  Then, for
            each file in the list, <command>ldd</command> determines the file's
            shared library requirements, producing a list of sonames.  Finally,
            the list of sonames is sanitized by removing duplicates, and
            removing any paths.
          </para>
        </sect3>

        <sect3 id="s3-rpm-depend-find-provides">
          <title>
            <filename>find-provides</filename> &mdash; Automatically Determine
            Shared Library Sonames
          </title>
          <indexterm>
            <primary>dependencies</primary>
            <secondary>scripts related to</secondary>
            <tertiary><filename>find-provides</filename></tertiary>
          </indexterm>

          <indexterm>
            <primary><filename>find-provides</filename> script</primary>
          </indexterm>

          <para>
            The <filename>find-provides</filename> script for Linux is a bit
            more complex, but still pretty straightforward:

            <screen width="60">
<computeroutput>
#!/bin/bash

# This script reads filenames from STDIN and outputs any relevant
# provides information that needs to be included in the package.

filelist=$(grep ".so" | grep -v "^/lib/ld.so" | 
xargs file -L 2&gt;/dev/null | grep "ELF.*shared object" | cut -d: -f1)

for f in $filelist; do
    soname=$(objdump -p $f | awk '/SONAME/ {print $2}')

    if [ "$soname" != "" ]; then
        if [ ! -L $f ]; then
            echo $soname
        fi
    else
        echo ${f##*/}
    fi
done | sort -u
</computeroutput>
            </screen>
          </para>

          <para>
            First, a list of shared libraries is created.  Then, for each file
            on the list, the soname is extracted, cleaned up, and duplicates
            removed.
          </para>
        </sect3>
      </sect2>

      <sect2 id="s2-rpm-depend-auto-depend-example">
        <title>Automatic Dependencies: An Example</title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary>automatically added</secondary>
          <tertiary>example of</tertiary>
        </indexterm>

        <para>
          Let's take a widely used program, <command>ls</command>, the directory
          lister, as an example.  On a &RHL; system, <command>ls</command> is
          part of the <filename>fileutils</filename> package and is installed in
          <filename>/bin</filename>.  Let's play the part of RPM during
          <filename>fileutils</filename>' package build and run
          <filename>find-requires</filename> on <filename>/bin/ls</filename>.
          Here's what we'll see:

          <screen width="60">
<prompt># </prompt><command>find-requires</command>
<userinput>/bin/ls</userinput>
<userinput>&lt;ctrl-d&gt;</userinput>
<computeroutput>
libc.so.5
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          The <filename>find-requires</filename> script returned
          <filename>libc.so.5</filename>.  Therefore, RPM should add a
          requirement for <filename>libc.so.5</filename> when the
          <filename>fileutils</filename> package is built.  We can verify that
          RPM did add <command>ls</command>' requirement for
          <filename>libc.so.5</filename> by using RPM's
          <command>--requires</command> option to display
          <filename>fileutils</filename>' requirements:

          <screen width="60">
<prompt># </prompt><command>rpm -q --requires fileutils</command>
<computeroutput>
libc.so.5
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          OK, that's the first half of the equation &mdash; RPM automatically
          detecting a package's shared library requirements.  Now let's look at
          the second half of the equation -- RPM detecting packages that provide
          shared libraries.  Since the <filename>libc</filename> package
          includes, among others, the shared library
          <filename>/lib/libc.so.5.3.12</filename>, RPM would obtain its soname.
          We can simulate this by using <filename>find-provides</filename> to
          print out the library's soname:

          <screen width="60">
<prompt># </prompt><command>find-provides</command>
<userinput>/lib/libc.so.5.3.12</userinput>
<userinput><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></userinput>
<computeroutput>
libc.so.5
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>
        <para>
          OK, so <filename>/lib/libc.so.5.3.12</filename>'s soname is
          <filename>libc.so.5</filename>.  Let's see if the
          <filename>libc</filename> package really does "provide" the
          <filename>libc.so.5</filename> soname:

          <screen width="60">
<prompt># </prompt><command>rpm -q --provides libc</command>
<computeroutput>
libm.so.5
libc.so.5
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          Yes, there it is, along with the soname of another library contained
          in the package.  In this way, RPM can ensure that any package
          requiring <filename>libc.so.5</filename> will have a compatible
          library available as long as the <filename>libc</filename> package,
          which provides <filename>libc.so.5</filename>, is installed.
        </para>
        <para>
          In most cases, automatic dependencies are enough to fill the bill.
          However, there are circumstances when the package builder has to
          manually add dependency information to a package.  Fortunately, RPM's
          approach to manual dependencies is both simple and flexible.
        </para>
      </sect2>

      <sect2 id="s2-rpm-depend-autoreqprov">
        <title>
          The <command>autoreqprov</command>, <command>autoreq</command>,
          and <command>autoprov</command> Tags &mdash; Disable Automatic
          Dependency Processing
        </title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary><command>autoreqprov</command> tag</secondary>
        </indexterm>

        <indexterm>
          <primary><command>autoreqprov</command> tag</primary>
        </indexterm>

        <para>
          There may be times when RPM's automatic dependency processing is not
          desired.  In these cases, the <command>autoreqprov</command>,
          <command>autoreq</command>, and <command>autoprov</command> tags may
          be used to disable it.  This tag takes a <command>yes/no</command> or
          <command>0/1</command> value.  For example, to disable automatic
          dependency processing, the following line may be used:

          <screen width="60">
<computeroutput>
AutoReqProv: no
</computeroutput>
          </screen>
        </para>

        <para>
          The <command>autoreq</command> and <command>autoprov</command> tags
          can be used to disable automatic processing of requirements or
          "provides" only, respectively.
        </para>
      </sect2>
    </sect1>

    <sect1 id="s1-rpm-depend-manual-dependencies">
      <title>Manual Dependencies</title>
      <indexterm>
        <primary>dependencies</primary>
        <secondary>manually added</secondary>
      </indexterm>

      <para>
        You might have noticed that we've been using the words "requires" and
        "provides" to describe the dependency relationships between packages.
        As it turns out, these are the exact words used in spec files to
        manually add dependency information.  Let's look at the first tag:
        <command>Requires</command>.
      </para>

      <sect2 id="s2-rpm-depend-requires-tag">
        <title>The <command>Requires</command> Tag</title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary><command>Requires</command> tag</secondary>
        </indexterm>

        <indexterm>
          <primary><command>Requires</command> tag</primary>
        </indexterm>

        <para>
          We've been deliberately vague when discussing exactly what it is that
          a package requires.  Although we've used the word "capabilities", in
          fact, manual dependency requirements are always represented in terms
          of packages.  For example, if package <filename>foo</filename>
          requires that package <filename>bar</filename> is installed, it's only
          necessary to add the following line to <filename>foo</filename>'s spec
          file:

          <screen width="60">
<computeroutput>
Requires: bar
</computeroutput>
          </screen>
        </para>
        <para>
          Later, when the <filename>foo</filename> package is being installed,
          RPM will consider <filename>foo</filename>'s dependency requirements
          met if any version of package <filename>bar</filename> is already
          installed.
          <footnote>
            <para>
              As long as the requiring <emphasis>and</emphasis> the providing
              packages are installed using the same invocation of RPM, the
              dependency checking will succeed.  For example, the command
              <command>rpm -ivh *.rpm</command> will properly check for
              dependencies, even if the requiring package ends up being
              installed <emphasis>before</emphasis> the providing package.
            </para>
          </footnote>
        </para>

        <para>
          If more than one package is required, they can be added to the
          <command>Requires</command> tag, one after another, separated by
          commas and/or spaces.  So if package <filename>foo</filename> requires
          packages <filename>bar</filename> <emphasis>and</emphasis>
          <filename>baz</filename>, the following line will do the trick:

          <screen width="60">
<computeroutput>
Requires: bar, baz
</computeroutput>
          </screen>
        </para>
        <para>
          As long as any version of <filename>bar</filename> and
          <filename>baz</filename> is installed, <filename>foo</filename>'s
          dependencies will be met.
        </para>

        <sect3 id="s3-rpm-depend-version-requirements">
          <title>Adding Version Requirements</title>
          <indexterm>
            <primary>dependencies</primary>
            <secondary>version requirements, adding</secondary>
          </indexterm>

          <para>
            When a package has slightly more stringent needs, it's possible to
            require certain versions of a package.  All that's necessary is to
            add the desired version number, preceded by one of the following
            comparison operators:

            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  Requires package with a version less than the specified
                  version.
                </para>
              </listitem>

              <listitem>
                <para>
                  Requires package with a version less than or equal to the
                  specified version.
                </para>
              </listitem>

              <listitem>
                <para>
                  Requires package with a version equal to the specified
                  version.
                </para>
              </listitem>

              <listitem>
                <para>
                  Requires package with a version equal to or greater than the
                  specified version.
                </para>
              </listitem>

              <listitem>
                <para>
                  Requires package with a version greater than the specified
                  version.
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
            Continuing with our example, let's suppose that the required version
            of package <filename>bar</filename> actually needs to be at least
            2.7, and that the <filename>baz</filename> package must be version
            2.1 &mdash; no other version will do.  Here's what the
            <command>Requires</command> tag line would look like:

            <screen width="60">
<computeroutput>
Requires: bar &gt;= 2.7, baz = 2.1
</computeroutput>
            </screen>
          </para>
          <para>
            We can get even more specific and require a particular
            <emphasis>release</emphasis> of a package:

            <screen width="60">
<computeroutput>
Requires: bar &gt;= 2.7-4, baz = 2.1-1
</computeroutput>
            </screen>
          </para>
        </sect3>

        <sect3 id="s3-rpm-depend-version-not-enough">
          <title>When Version Numbers Aren't Enough</title>

          <para>
            You might think that with all these features, RPM's dependency
            processing can handle every conceivable situation.  You'd be right,
            except for the problem of version numbers.  RPM needs to be able to
            determine which version numbers are more recent than others, in
            order to perform its version comparisons.
          </para>
          <para>
            It's pretty simple to determine that version 1.5 is older than
            version 1.6.  But what about 2.01 and 2.1?  Or 7.6a and 7.6?
            There's no way for RPM to keep up with all the different
            version-numbering schemes in use.  But there <emphasis>is</emphasis>
            a solution; two, in fact&hellip;
          </para>

          <sect4 id="s4-rpm-depend-version-epoch">
            <title>Solution Number 1: Epoch numbers</title>
            <indexterm>
              <primary>dependencies</primary>
              <secondary>epoch numbers, using</secondary>
            </indexterm>

            <para>
              When RPM can't decipher a package's version number, it's time to
              pull out the <command>Epoch</command> tag.  This tag is used to
              help RPM determine version number ordering.  Here's a sample
              <command>Epoch</command> tag line:

              <screen width="60">
<computeroutput>
Epoch: 42
</computeroutput>
              </screen>
            </para>

            <para>
              This line indicates that the package has an epoch number of 42.
              What does the 42 mean?  Only that this version of the package is
              newer than the same package with an epoch number of 41, but
              older than the same package with an epoch number of 43.  If you
              think of epoch numbers as being nothing more than very simple
              version numbers, you'll be on the mark.  In other words,
              <command>Epoch</command> is the <emphasis>most significant
              component</emphasis> of a package's complete version identifier
              with regards to RPM's version comparison algorithm.
            </para>
            <para>
              In order to direct RPM to look at the epoch number instead of the
              version number when doing dependency checking, it's necessary to
	      use a "<command>:</command>" before the version in the
	      <command>Requires</command> tag line.  So if a package
	      requires package <filename>foo</filename> to have an
	      epoch number equal to 42, the following tag line would
	      be used:

              <screen width="60">
<computeroutput>
Requires: foo = 42:
</computeroutput>
              </screen>
            </para>

            <para>
              If the <filename>foo</filename> package needs to have an epoch
              number greater than or equal to 42, this line would work:

              <screen width="60">
<computeroutput>
Requires: foo &gt;= 42:
</computeroutput>
              </screen>
            </para>
            <para>
              If the <filename>foo</filename> package needs to have version with
	      an epoch number 42 and version 1.0, this line would work:

              <screen width="60">
<computeroutput>
Requires: foo &gt;= 42:1.0
</computeroutput>
              </screen>
	      You <emphasis>must</emphasis> include the epoch in a
	      requires if it exists in the package.
            </para>
            <para>
	       
              It might seem that using epoch numbers is a lot of extra trouble,
              and you're right.  But there is an alternative:
            </para>
          </sect4>

          <sect4 id="s4-rpm-depend-say-no">
            <title>Solution Number 2: Just Say No!</title>

            <para>
              If you have the option between changing the software's
              version-numbering scheme, or using epoch numbers in RPM, please
              consider changing the version-numbering scheme.  Chances are, if
              RPM can't figure it out, most of the people using your software
              can't, either.  But in case you aren't the author of the software
              you're packaging, and its version numbering scheme is giving RPM
              fits, the <command>epoch</command> tag can help you out.
            </para>
          </sect4>
        </sect3>

        <sect3 id="s3-rpm-depend-fine-grained">
          <title>Fine Grained Dependencies</title>

          <para>
            For the vast majority of dependencies, using the normal
            <command>Requires</command> is enough.  However, there are some
            special situations where one might want more fine grained control
            over them.  When multiple packages are being installed in a
            transaction, installation order and dependency loops are such
            cases.  Erasure order of packages within a transaction is
            the opposite of their installation order.
          </para>

          <para>
            A very trivial example of a dependency loop is when package
            <filename>foo</filename> requires <filename>bar</filename>, and
            <filename>bar</filename> requires <filename>foo</filename>.
            However, when the number of packages involved in a loop grows, the
            loops get more and more complex.  The special dependency types in
            this chapter are at best <emphasis>hints</emphasis> for RPM; as a
            rule of thumb, it is best to try to
            <emphasis>avoid dependency loops</emphasis> altogether.
            However, in some rare cases, they may be desired.
          </para>

          <sect4 id="s3-rpm-depend-prereq">
            <title>The <command>PreReq</command> Tag</title>
            <indexterm>
              <primary>dependencies</primary>
              <secondary><command>PreReq</command> tag</secondary>
            </indexterm>
            <indexterm>
              <primary><command>PreReq</command> tag</primary>
            </indexterm>

            <para>
              The <command>PreReq</command> tag is the same as
              <command>Requires</command>, originally with one additional
              property.  Using it used to tell RPM that the package marked as
              <command>PreReq</command> should be installed before the package
              containing the dependency.  However, as of RPM version 4.4, this
              special property is being phased out, and
              <command>PreReq</command> and <command>Requires</command> will
              soon have no functional differences.
            </para>

            <para>
              A plain <command>Requires</command> is enough to ensure proper
              installation order <emphasis>if there are no dependency
              loops</emphasis> present in the transaction.  If dependency
              loops are present and cannot be avoided, packagers should strive
              to construct them in a way that the order of installation of the
              the this way interdependent packages does not matter.
            </para>

            <para>
              Historically, in dependency loops
              <command>PreReq</command> used to "win" over the conventional
              <command>Requires</command> when RPM determined the
              installation order in a transaction.  But as said above, this
              functionality is being phased out, and one should no longer
              assume things will work that way.
            </para>

          </sect4>

          <sect4 id="s3-rpm-depend-context-depends">
            <title>Context Marked Dependencies</title>
            <indexterm>
              <primary>dependencies</primary>
              <secondary>Context Marked Dependencies</secondary>
            </indexterm>

            <!-- TODO: since which version of RPM do context markers exist? -->
            <para>
              Recent versions of RPM support context marked dependencies.
              This is a special type of a dependency that applies only in a
              specified <emphasis>context</emphasis>.  Using this feature,
              one can specify dependencies for pre- and post(un)install
              scriptlets, ie. the context of a dependency is the execution
              time of the specified scriptlet.
            </para>

            <para>
              The syntax for specifying these dependencies is:

              <screen width="60">
<computeroutput>
Requires(<replaceable>X</replaceable>): foo
</computeroutput>
              </screen>
            </para>

            <para>
              Here, <replaceable>X</replaceable> can be one of
              <command>pre</command>, <command>post</command>,
              <command>preun</command>, or <command>postun</command>, which
              tells RPM that the package depends on package
              <filename>foo</filename> for running the corresponding
              <command>%pre</command>, <command>%post</command>,
              <command>%preun</command>, or <command>%postun</command> script.
            </para>

            <para>
              In practice, RPM enforces the above dependencies
              <emphasis>until</emphasis> the specified script has been run,
              not <emphasis>at</emphasis> that time.  In other words,
              it will allow erasing a dependency that was marked for eg. the
              <command>%post</command> script for an already installed package,
              but will not allow erasing one that is required for a
              <command>%postun</command> script for such a package.
              This is to reduce confusion; it would be somewhat odd if RPM
              told one to install a package in order to get another one erased.
            </para>
          </sect4>

        </sect3>
      </sect2>

      <sect2 id="s2-rpm-depend-conflicts-tag">
        <title>The <command>Conflicts</command> Tag</title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary><command>Conflicts</command> tag</secondary>
        </indexterm>

        <indexterm>
          <primary><command>Conflicts</command> tag</primary>
        </indexterm>

        <para>
          The <command>Conflicts</command> tag is the logical complement to the
          <command>Requires</command> tag.  It is used to specify which packages
          conflict with the current package.  RPM will not permit conflicting
          packages to be installed unless overridden with the
          <command>--nodeps</command> option.
        </para>
        <para>
          The <command>Conflicts</command> tag has the same format as
          <command>Requires</command>.  It accepts a real or virtual package
          name and can optionally include version and release specifications or
          an epoch number.
        </para>
      </sect2>

      <sect2 id="s2-rpm-depend-provides-tag">
        <title>The <command>Provides</command> Tag</title>
        <indexterm>
          <primary>dependencies</primary>
          <secondary><command>Provides</command> tag</secondary>
        </indexterm>

        <indexterm>
          <primary><command>Provides</command> tag</primary>
        </indexterm>

        <para>
          Now that you've seen how it's possible to require a package using the
          <command>Requires</command> tag, you're probably expecting that you'll
          need to use the <command>Provides</command> tag in every single
          package.  After all, RPM has to get those package names from
          <emphasis>somewhere</emphasis>, right?
        </para>
        <para>
          While it is true that RPM needs to have the package names available,
          the <command>Provides</command> tag is normally not required.  It
          would actually be redundant, because the RPM database already contains
          the name of every package installed.  There's no need to duplicate
          that information.
        </para>
        <para>
          But wait &mdash; We said earlier that manual dependency requirements
          are <emphasis>always</emphasis> represented in terms of packages.  If
          RPM doesn't require the package builder to use the
          <command>Provides</command> tag to provide the package name, then what
          is the <command>Provides</command> tag used for?
        </para>

        <sect3 id="s3-rpm-depend-virtual-packages">
          <title>Virtual Packages</title>
          <indexterm>
            <primary>dependencies</primary>
            <secondary>virtual packages</secondary>
          </indexterm>

          <para>
            Enter the virtual package.  A virtual package is nothing more than a
            name specified with the <command>Provides</command> tag.  Virtual
            packages are handy when a package requires a certain capability, and
            that capability can be provided by any one of several packages.
            Here's an example:
          </para>
          <para>
            In order to work properly, <command>sendmail</command> needs a local
            delivery agent to handle mail delivery.  There are a number of
            different local delivery agents available &mdash;
            <command>sendmail</command> will work just fine with any of them.
          </para>
          <para>
            In this case, it doesn't make sense to force the use of a particular
            local delivery agent; as long as one's installed,
            <filename>sendmail</filename>'s requirements will have been
            satisfied.  So <filename>sendmail</filename>'s package builder adds
            the following line to <filename>sendmail</filename>'s spec file:

            <screen width="60">
<computeroutput>
Requires: lda
</computeroutput>
            </screen>
          </para>

          <para>
            There is no package with that name available, so
            <filename>sendmail</filename>'s requirements must be met with a
            virtual package.  The creators of the various local delivery agents
            indicate that their packages satisfy the requirements of the
            <filename>lda</filename> virtual package by adding the following
            line to <emphasis>their</emphasis> packages' spec files:

            <screen width="60">
<computeroutput>
Provides: lda
</computeroutput>
            </screen>
          </para>

          <para>
            (Note that virtual packages may not have version numbers.)  Now,
            when <filename>sendmail</filename> is installed, as long as there is
            a package installed that provides the <filename>lda</filename>
            virtual package, there will be no problem.
          </para>
        </sect3>
      </sect2>
    </sect1>

<sect1 id="s1-rpm-depend-summary">
<title>To Summarize&hellip;</title>

      <para>
        RPM's dependency processing is based on tracking the capabilities a
        package provides, and the capabilities a package requires.  A package's
        requirements can come from two places:

        <orderedlist>
          <listitem>
            <para>
              Shared library requirements, automatically determined by RPM.
            </para>
          </listitem>

          <listitem>
            <para>
              The <command>Requires</command> tag line, manually added to the
              package's spec file.
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        These requirements can be viewed by using RPM's
        <command>--requires</command> query option.  A specific requirement can
        be viewed by using the <command>--whatrequires</command> query option.
        Both options are fully described in <xref linkend="ch-rpm-query"/>.
      </para>
      <para>
        The capabilities a package provides, can come from three places:

        <orderedlist>
          <listitem>
            <para>
              Shared library sonames, automatically determined by RPM.
            </para>
          </listitem>

          <listitem>
            <para>
              The <command>Provides</command> tag line, manually added to the
              package's spec file.
            </para>
          </listitem>

          <listitem>
            <para>
              The package's name (and optionally, version/epoch number).
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        The first two types of information can be viewed by using RPM's
        <command>--provides</command> query option.  A specific capability can
        be viewed by using the <command>--whatprovides</command> query option.
        Both options are fully described in <xref linkend="ch-rpm-query"/>.
      </para>
      <para>
        The package name and version are not considered capabilities that are
        explicitly provided.  Therefore, if a search using
        <command>--provides</command> or <command>--whatprovides</command> comes
        up dry, try simply looking for a package by that name.
      </para>
      <para>
        As you've probably gathered by now, using manual dependencies requires
        some level of synchronization between packages.  This can be tricky,
        particularly if you're not responsible for both packages.  But RPM's
        dependency processing can make life easier for your users.
      </para>
    </sect1>
  </chapter>
