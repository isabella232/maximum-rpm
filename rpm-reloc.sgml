  <chapter id="ch-rpm-reloc">
    <title>Making a Relocatable Package</title>
    <!-- label: rpm-reloc -->

    <indexterm>
      <primary>relocatable packages</primary>
    </indexterm>

    <para>
      RPM has the ability to give users some latitude in deciding where packages
      are to be installed on their systems.  However, package builders must
      first design their packages to give users this freedom.
    </para>

    <para>
      That's all well and good, but why would the ability to "relocate" a
      package be all that important?
    </para>

    <sect1 id="s1-rpm-reloc-why">
      <title>Why relocatable packages?</title>
      <indexterm>
        <primary>relocatable packages</primary>
        <secondary>reasons for</secondary>
      </indexterm>

      <para>
        One of the many problems that plague a system administrator's life is
        disk space.  Usually, there's not enough of it, and if there
        <emphasis>is</emphasis> enough, chances are it's in the wrong place.
        Here's a hypothetical example:

        <itemizedlist mark="bullet">
          <listitem>
            <para>
              Some new software comes out and is desired greatly by the user
              community.
            </para>
          </listitem>

          <listitem>
            <para>
              The system administrator carefully reviews the software's
              installation documentation prior to doing to the installation.
              <footnote>
                <para>
                  Hey, we said it was hypothetical!
                </para>
              </footnote>
              She notes that the software, all 150MB of it, installs into
              <filename>/opt</filename>.
            </para>
          </listitem>

          <listitem>
            <para>
              Frowning, the sysadmin fires off a quick <command>df</command>
              command:

              <screen width="60">
<prompt># </prompt><userinput>df</userinput>
<computeroutput>
Filesystem         1024-blocks  Used Available Capacity Mounted on
/dev/sda0             100118   28434    66514     30%   /
/dev/sda6             991995  365527   575218     39%   /usr
</computeroutput>
<prompt># </prompt>
              </screen>
            </para>

            <para>
              Bottom line: There's no way 150MB of new software is going to fit
              on the root filesystem.
            </para>
          </listitem>

          <listitem>
            <para>
              Sighing heavily, the sysadmin ponders what to do next.  If only
              there were some way to install the software somewhere on the
              <filename>/usr</filename> filesystem&hellip;
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        It doesn't have to be this way.  RPM has the ability to make packages
        that can be installed with a user-specified prefix that dictates where
        the software will actually be placed.  By making packages relocatable,
        the package builder can make life easier for sysadmins everywhere.  But
        what exactly <emphasis>is</emphasis> a relocatable package?
      </para>

      <para>
        A relocatable package is a package that is standard in every way, save
        one.  The difference lies in the <command>prefix</command> tag.  When this tag
        is added to a spec file, RPM will attempt to build a relocatable
        package.
      </para>

      <para>
        Note the word "attempt".  There are a few conditions that must be met
        before a relocatable package can be built successfully, and this chapter
        will cover them all.  But first, let's look at exactly how RPM can
        relocate a package.  And the one component at the heart of package
        relocation is the <command>prefix</command> tag.
      </para>
    </sect1>

    <sect1 id="s1-rpm-reloc-prefix-tag">
      <title>The <command>prefix</command> tag: Relocation Central</title>
      <indexterm>
        <primary>relocatable packages</primary>
        <secondary><command>prefix</command> tag</secondary>
      </indexterm>

      <indexterm>
        <primary><command>prefix</command> tag</primary>
      </indexterm>

      <para>
        The best way to explain how the <command>prefix</command> tag is used is
        to step through an example.  Here's a sample <command>prefix</command>
        tag:

        <screen width="60">
<computeroutput>
Prefix: /opt
</computeroutput>
        </screen>
      </para>

      <para>
        In this example, the prefix path is defined as
        <filename>/opt</filename>.  This means that, by default, the package
        will install its files under <filename>/opt</filename>.  Let's assume
        the spec file contains the following line in its
        <command>%files</command> list:

        <screen width="60">
<computeroutput>
/opt/bin/baz
</computeroutput>
        </screen>
      </para>

      <para>
        If the package is installed without any relocation, this file will be
        installed in <filename>/opt/bin</filename>.  This is identical to how a
        non-relocatable package is installed.
      </para>

      <para>
        However, if the package <emphasis>is</emphasis> to be relocated on
        installation, the path of every file in the <command>%files</command>
        list is modified according to the following steps:

        <orderedlist>
          <listitem>
            <para>
              The part of the file's path that corresponds to the path specified
              on the <command>prefix</command> tag line is removed.
            </para>
          </listitem>

          <listitem>
            <para>
              The user-specified relocation prefix is prepended to the file's
              path.
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        Using our <filename>/opt/bin/baz</filename> file as an example, let's
        assume that the user installing the package wishes to override the
        default prefix (<filename>/opt</filename>), with a new prefix, say,
        <filename>/usr/local/opt</filename>.  Following the steps above, we
        first remove the original prefix from the file's path:

        <screen width="60">
<computeroutput>
/opt/bin/baz
</computeroutput>
        </screen>
      </para>

      <para>
        becomes:

        <screen width="60">
<computeroutput>
/bin/baz
</computeroutput>
        </screen>
      </para>

      <para>
        Next, we add the user-specified prefix to the front of the remaining
        part of the filename:

        <screen width="60">
<computeroutput>
/usr/local/opt + /bin/baz = /usr/local/opt/bin/baz
</computeroutput>
        </screen>
      </para>

      <para>
        Now that the file's new path has been created, RPM installs the file
        normally.  This part of it seems simple enough, and it is.  But as we
        mentioned above, there are a few things the package builder needs to
        consider before getting on the relocatable package bandwagon.
      </para>
    </sect1>

    <sect1 id="s1-rpm-reloc-wrinkles">
      <title>Relocatable Wrinkles: Things to Consider</title>
      <indexterm>
        <primary>relocatable packages</primary>
        <secondary>requirements</secondary>
      </indexterm>

      <para>
        While it's certainly no problem to add a <command>prefix</command> tag
        line to a spec file, it's necessary to consider a few other issues:

        <itemizedlist mark="bullet">
          <listitem>
            <para>
              Every file in the <command>%files</command> list must start with
              the path specified on the <command>prefix</command> tag line.
            </para>
          </listitem>

          <listitem>
            <para>
              The software must be written such that it can operate properly if
              relocated.  Absolute symlinks are a prime example of this.
            </para>
          </listitem>

          <listitem>
            <para>
              Other software must not rely on the relocatable package being
              installed in any particular location.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        Let's cover each of these issues, starting with the
        <command>%files</command> list.
      </para>

      <sect2 id="s2-rpm-reloc-files-list-restrictions">
        <title><command>%files</command> List Restrictions</title>
        <indexterm>
          <primary>relocatable packages</primary>
          <secondary><command>%files</command> list restrictions</secondary>
        </indexterm>

        <para>
          As mentioned above, each file in the <command>%files</command> list
          must start with the relocation prefix.  If this isn't done, the build
          will fail:

          <screen width="60">
<prompt># </prompt><userinput>rpm -ba cdplayer-1.0.spec</userinput>
<computeroutput>
* Package: cdplayer
+ umask 022
+ echo Executing: %prep
&hellip;
Binary Packaging: cdplayer-1.0-1
Package Prefix = usr/local
File doesn't match prefix (usr/local): /usr/doc/cdplayer-1.0-1
File not found: /usr/doc/cdplayer-1.0-1
Build failed.
</computeroutput>
<prompt># </prompt>
          </screen>
        </para>

        <para>
          In our example, the build proceeded normally until the time came to
          create the binary package file.  At that point RPM detected the
          problem.  The error message says it all: The <command>prefix</command>
          line in the spec file (<filename>/usr/local</filename>) was not
          present in the first part of the file's
          (<filename>/usr/doc/cdplayer-1.0-1</filename>) path.  This stopped the
          build in its tracks.
        </para>

        <para>
          The fact that every file in a relocatable package must be installed
          under the directory specified in the <command>prefix</command> line,
          raises some issues.  For example, what about a program that reads a
          configuration file normally kept in <filename>/etc</filename>?
          <indexterm>
            <primary>config files</primary>
          </indexterm>
        </para>

        <para>
          This question leads right into our next section.
        </para>
      </sect2>

      <sect2 id="s2-rpm-reloc-must-be-relocatable">
        <title>Relocatable Packages Must Contain Relocatable Software</title>
        <indexterm>
          <primary>relocatable packages</primary>
          <secondary>software requirements</secondary>
        </indexterm>

        <para>
          While this section's title seems pretty obvious, it's not always easy
          to tell if a particular piece of software can be relocated.  Let's
          take a look at the question raised at the end of the previous section.
          If a program has been written to read its configuration file from
          <filename>/etc</filename>, there are three possible approaches to
          making that program relocatable:

          <orderedlist>
            <listitem>
              <para>
                Set the prefix to <filename>/etc</filename> and package
                everything under <filename>/etc</filename>.
              </para>
            </listitem>

            <listitem>
              <para>
                Package everything somewhere other than
                <filename>/etc</filename> and leave out the config file
                entirely.
                <indexterm>
                  <primary>config files</primary>
                </indexterm>
              </para>
            </listitem>

            <listitem>
              <para>
                Modify the program.
              </para>
            </listitem>
          </orderedlist>
        </para>

        <para>
          The first approach would certainly work from a purely technical
          standpoint, but not many people would be happy with a program that
          installed itself in <filename>/etc</filename>.  So this approach isn't
          viable.
        </para>

        <para>
          The second approach might be more appropriate, but it forces users to
          complete the install by having them create the config file themselves.
          If RPM's goal is to make software easier to install and remove, this
          is not a viable approach, either!
        </para>

        <para>
          The final approach might be the best.  Once the program is installed,
          when the rewritten software is first run, it could see that no
          configuration file existed in <filename>/etc</filename>, and create
          one.
          <indexterm>
            <primary>config files</primary>
          </indexterm>
        </para>

        <para>
          However, even though this would work, when the time came to erase the
          package, the config file would be left behind.  RPM had never
          installed it, so RPM couldn't get rid of it.  There's also the fact
          that this approach is probably more labor intensive than most package
          builders would like.
        </para>

        <para>
          None of these approaches are very appealing, are they?  Some software
          just doesn't relocate very well.  In general, any of the following
          things are warning signs that relocation is going to be a problem:

          <itemizedlist mark="bullet">
            <listitem>
              <para>
                The software contains one or more files that must be installed
                in specific directories
              </para>
            </listitem>

            <listitem>
              <para>
                The software refers to system files using relative paths (Which
                is really just another way of saying the software must be
                installed in a particular directory)
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          If these kinds of issues crop up, then making the software relocatable
          is going to be tough.  And there's still one issue left to consider.
        </para>
      </sect2>

      <sect2 id="s2-rpm-reloc-referenced">
        <title>The Relocatable Software Is Referenced By Other Software</title>

        <para>
          Even assuming the software is written so that it can be put in a
          relocatable package, there still might be a problem.  And that problem
          centers not on the relocatable software itself, but on other programs
          that reference the relocatable software.
        </para>

        <para>
          For example, there are times when a package needs to execute other
          programs.  This might include backup software that needs to send mail,
          or a communications program that needs to compress files.  If these
          underlying programs were relocatable, and not installed where other
          packages expect them, then they would be of little use.
        </para>

        <para>
          Granted, this isn't a common problem, but it can happen.  And for the
          package builder interested in building relocatable packages, it's an
          issue that needs to be explored.  Unfortunately, this type of problem
          can be the hardest to find.
        </para>

        <para>
          If, however, a software product has been found to be relocatable, the
          mechanics of actually building a relocatable package are pretty
          straightforward.  Let's give it a try.
        </para>
      </sect2>
    </sect1>

    <sect1 id="s1-rpm-reloc-building-relocatable">
      <title>Building a Relocatable Package</title>
      <indexterm>
        <primary>relocatable packages</primary>
        <secondary>building</secondary>
      </indexterm>

      <para>
        For this example, we'll use our tried-and-true
        <filename>cdplayer</filename> application.  Let's start by reviewing the
        spec file for possible problems:

        <screen width="60">
<computeroutput>
#
# Example spec file for cdplayer app...
#
Summary:A CD player app that rocks!
Name: cdplayer
&hellip;
%files
%doc README
/usr/local/bin/cdp
/usr/local/bin/cdplay
%doc /usr/local/man/man1/cdp.1
%config /etc/cdp-config
</computeroutput>
        </screen>
      </para>

      <para>
        Everything looks all right, except for the <command>%files</command>
        list.  There are files in <filename>/usr/local/bin</filename>, a
        <command>man</command> page in <filename>/usr/local/man/man1</filename>,
        and a config file in <filename>/etc</filename>.  A prefix of
        <filename>/usr/local</filename> would work pretty well, except for that
        <filename>cdp-config</filename> file.
      </para>

      <para>
        For the sake of this first build, we'll declare the config file
        unnecessary and remove it from the <command>%files</command> list.
        We'll then add a <command>prefix</command> tag line, setting the prefix
        to <filename>/usr/local</filename>.  After these changes are made, let's
        try a build:

        <screen width="60">
<prompt># </prompt><userinput>rpm -ba cdplayer-1.0.spec</userinput>
<computeroutput>
* Package: cdplayer
+ umask 022
+ echo Executing: %prep
Executing: %prep
+ cd /usr/src/redhat/BUILD
+ cd /usr/src/redhat/BUILD
+ rm -rf cdplayer-1.0
+ gzip -dc /usr/src/redhat/SOURCES/cdplayer-1.0.tgz
&hellip;
Binary Packaging: cdplayer-1.0-1
Package Prefix = usr/local
File doesn't match prefix (usr/local): /usr/doc/cdplayer-1.0-1
File not found: /usr/doc/cdplayer-1.0-1
Build failed.
</computeroutput>
<prompt># </prompt>
        </screen>
      </para>

      <para>
        The build proceeded normally up to the point of actually creating the
        binary package.  The <computeroutput>Package Prefix =
        usr/local</computeroutput> line confirms that RPM picked up our
        <command>prefix</command> tag line.  But the build stopped &mdash; and
        on a file called <filename>/usr/doc/cdplayer-1.0-1</filename>.  But that
        file isn't even in the <command>%files</command> list.  What's going on?
      </para>

      <para>
        Take a closer look at the <command>%files</command> list.  See the line
        that reads <command>%doc README</command>?  In <xref
        linkend="s3-rpm-inside-flist-doc-directive">, we discussed how the
        <command>%doc</command> directive creates a directory under
        <filename>/usr/doc</filename>.  That's the file that killed the build
        &mdash; the directory created by the <command>%doc</command> directive.
      </para>

      <para>
        Let's temporarily remove that line from the <command>%files</command>
        list and try again:

        <screen width="60">
<prompt># </prompt><userinput>rpm -ba cdplayer-1.0.spec</userinput>
<computeroutput>
* Package: cdplayer
+ umask 022
+ echo Executing: %prep
Executing: %prep
+ cd /usr/src/redhat/BUILD
+ cd /usr/src/redhat/BUILD
+ rm -rf cdplayer-1.0
+ gzip -dc /usr/src/redhat/SOURCES/cdplayer-1.0.tgz
&hellip;
Binary Packaging: cdplayer-1.0-1
Package Prefix = usr/local
Finding dependencies...
Requires (2): libc.so.5 libncurses.so.2.0
bin/cdp
bin/cdplay
man/man1/cdp.1
90 blocks
Generating signature: 0
Wrote: /usr/src/redhat/RPMS/i386/cdplayer-1.0-1.i386.rpm
+ umask 022
+ echo Executing: %clean
Executing: %clean
+ cd /usr/src/redhat/BUILD
+ cd cdplayer-1.0
+ exit 0
Source Packaging: cdplayer-1.0-1
cdplayer-1.0.spec
cdplayer-1.0.tgz
82 blocks
Generating signature: 0
Wrote: /usr/src/redhat/SRPMS/cdplayer-1.0-1.src.rpm
</computeroutput>
<prompt># </prompt>
        </screen>
      </para>

      <para>
        The build completed normally.  Note how the files to be placed in the
        binary package file are listed, minus the prefix of
        <filename>/usr/local</filename>.  Some of you might be wondering why the
        <filename>cdp.1</filename> file didn't cause problems.  After all, it
        had a <command>%doc</command> directive, too.  The answer lies in the
        way the file was specified.  Since the file was specified using an
        absolute path, and that path started with the prefix
        <filename>/usr/local</filename>, there was no problem.  A more complete
        discussion of the <command>%doc</command> directive can be found in
        <xref linkend="s3-rpm-inside-flist-doc-directive">.
      </para>

      <sect2 id="s2-rpm-reloc-tying-loose-ends">
        <title>Tying Up the Loose Ends</title>

        <para>
          In the course of building this package, we ran into two hitches:

          <orderedlist>
            <listitem>
              <para>
                The config file <filename>cdp-config</filename> couldn't be
                installed in <filename>/etc</filename>.
                <indexterm>
                  <primary>config files</primary>
                </indexterm>
              </para>
            </listitem>

            <listitem>
              <para>
                The <filename>README</filename> file could not be packaged using
                the <command>%doc</command> directive.
              </para>
            </listitem>
          </orderedlist>
        </para>

        <para>
          Both of these issues are due to the fact that the files' paths do not
          start with the default prefix path <filename>/usr/local</filename>.
          Does this mean this package cannot be relocated?  Possibly, but there
          are two options to consider.  The first option is to review the
          prefix.  In the case of our example, if we chose a prefix of
          <filename>/usr</filename> instead of <filename>/usr/local</filename>,
          the <filename>README</filename> file could be packaged using the
          <command>%doc</command> directive, since the default documentation
          directory is <filename>/usr/doc</filename>.  Another approach would be
          to use the <command>%docdir</command> directive to define another
          documentation-holding directory somewhere along the prefix path.
          <footnote>
            <para>
              For more information on the <command>%docdir</command> directive,
              please see <xref linkend="s3-rpm-inside-docdir-directive">.
            </para>
          </footnote>
        </para>

        <para>
          This approach wouldn't work for <filename>/etc/cdp-config</filename>,
          though.  To package that file, we'd need to resort to more extreme
          measures.  Basically, this approach would entail packaging the file in
          an acceptable directory (something under
          <filename>/usr/local</filename>) and using the
          <command>%post</command> post-install script to move the file to
          <filename>/etc</filename>.  Pointing a symlink at the config file is
          another possibility.
          <indexterm>
            <primary>config files</primary>
          </indexterm>
        </para>

        <para>
          Of course, this approach has some problems.  First, you'll need to
          write a <command>%postun</command> script to undo what the
          <command>%post</command> script does.
          <footnote>
            <para>
              Install and erase-time scripts have an environment variable,
              <envar>RPM_INSTALL_PREFIX</envar>, that can be used to write
              scripts that are able to act appropriately if the package is
              relocated.  See <xref linkend="s2-rpm-inside-erase-time-scripts">
              for more information.
            </para>
          </footnote>
          A <command>%verifyscript</command> that made sure the files were in
          place would be nice, too.  Second, because the file or symlink wasn't
          installed by RPM, there's no entry for it in the RPM database.  This
          reduces the utility of RPM's <command>-c</command> and
          <command>-d</command> options when issuing queries.  Finally, if you
          actually move files around using the <command>%post</command> script,
          the files you move will not verify properly, and when the package is
          erased, your users will get some disconcerting messages when RPM can't
          find the moved files to erase them.  If you have to resort to these
          kinds of tricks, it's probably best to forget trying to make the
          package relocatable.
        </para>
      </sect2>

      <sect2 id="s2-rpm-reloc-test-drive">
        <title>Test-Driving a Relocatable Package</title>
        <indexterm>
          <primary>relocatable packages</primary>
          <secondary>testing</secondary>
        </indexterm>

        <para>
          Looks like <filename>cdplayer</filename> is a poor candidate for being
          made relocatable.  However, since we did get a hamstrung version to
          build successfully, we can use it to show how to test a relocatable
          package.
        </para>

        <para>
          First, let's see if the binary package file's prefix has been recorded
          properly.  We can do this by using the
          <command>--queryformat</command> option to RPM's query mode:

          <screen width="60">
<prompt># </prompt><userinput>rpm -qp --queryformat '%{DEFAULTPREFIX}\n' cdplayer-1.0-1.i386.rpm</userinput>
<computeroutput>
/usr/local
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          The <command>DEFAULTPREFIX</command> tag directs RPM to display the
          prefix used during the build.  As we can see, it's
          <filename>/usr/local</filename>, just as we intended.  The
          <command>--queryformat</command> option is discussed in <xref
          linkend="s3-rpm-query-queryformat-option">.
        </para>

        <para>
          So it looks like we have a relocatable package.  Let's try a couple of
          installs and see if we really <emphasis>can</emphasis> install it in
          different locations.  First, let's try a regular install with no
          prefix specified:

          <screen width="60">
<prompt># </prompt><userinput>rpm -Uvh cdplayer-1.0-1.i386.rpm</userinput>
<computeroutput>
cdplayer    ##################################################
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          That seemed to work well enough.  Let's see if the files went where we
          intended:

          <screen width="60">
<prompt># </prompt><userinput>ls -al /usr/local/bin</userinput>
<computeroutput>
total 558
-rwxr-xr-x   1 root     root        40739 Oct  7 13:23 cdp*
lrwxrwxrwx   1 root     root           18 Oct  7 13:40 cdplay -&gt; /usr/local/bin/cdp*
&hellip;
# <userinput>ls -al /usr/local/man/man1</userinput>
total 9
-rwxr-xr-x   1 root     root         4550 Oct  7 13:23 cdp.1*
&hellip;
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          Looks good.  Let's erase the package and reinstall it with a different
          prefix:

          <screen width="60">
<prompt># </prompt><userinput>rpm -e cdplayer</userinput>
<prompt># </prompt><userinput>rpm -Uvh --prefix /usr/foonly/blather cdplayer-1.0-1.i386.rpm</userinput>
<computeroutput>
cdplayer    ##################################################
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          (We should mention that directories <filename>foonly</filename> and
          <filename>blather</filename> didn't exist prior to installing
          <filename>cdplayer</filename>.)
        </para>

        <para>
          RPM has another tag that can be used with the
          <command>--queryformat</command> option.  It's called
          <command>INSTALLPREFIX</command> and using it displays the prefix
          under which a package was installed.  Let's give it a try:

          <screen width="60">
<prompt># </prompt><userinput>rpm -q --queryformat '%{INSTALLPREFIX}\n' cdplayer</userinput>
<computeroutput>
/usr/foonly/blather
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          As we can see, it displays the prefix we entered on the command line.
          Let's see if the files were installed as we directed:

          <screen width="60">
<prompt># </prompt><userinput>cd /usr/foonly/blather/</userinput>
<prompt># </prompt><userinput>ls -al</userinput>
<computeroutput>
total 2
drwxr-xr-x   2 root     root         1024 Oct  7 13:45 bin/
drwxr-xr-x   3 root     root         1024 Oct  7 13:45 man/
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          So far, so good &mdash; the proper directories are there.  Let's look
          at the <command>man</command> page first:

          <screen width="60">
<prompt># </prompt><userinput>cd /usr/foonly/blather/man/man1/</userinput>
<prompt># </prompt><userinput>ls -al</userinput>
<computeroutput>
total 5
-rwxr-xr-x   1 root     root         4550 Oct  7 13:23 cdp.1*
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          That looks ok.  Now on to the files in <filename>bin</filename>:

          <screen width="60">
<prompt># </prompt><userinput>cd /usr/foonly/blather/bin</userinput>
<prompt># </prompt><userinput>ls -al</userinput>
<computeroutput>
total 41
-rwxr-xr-x   1 root     root        40739 Oct  7 13:23 cdp*
lrwxrwxrwx   1 root     root           18 Oct  7 13:45 cdplay -&gt; /usr/local/bin/cdp
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          Uh-oh.  That <filename>cdplay</filename> symlink isn't right.  What
          happened?  If we look at <filename>cdplayer</filename>'s makefile, we
          see the answer:

          <screen width="60">
<computeroutput>
install: cdp cdp.1.Z
&hellip;
ln -s /usr/local/bin/cdp /usr/local/bin/cdplay
</computeroutput>
          </screen>
        </para>

        <para>
          Ah, when the software is installed during RPM's build process, the
          make file sets up the symbolic link.  Looking back at the
          <command>%files</command> list, we see <filename>cdplay</filename>
          listed.  RPM blindly packaged the symlink, complete with its
          non-relocatable string.  This is why we mentioned absolute symlinks as
          a prime example of non-relocatable software.
        </para>

        <para>
          Fortunately, this problem isn't that difficult to fix.  All we need to
          do is change the line in the makefile that creates the symlink from:

          <screen width="60">
<computeroutput>
ln -s /usr/local/bin/cdp /usr/local/bin/cdplay
</computeroutput>
          </screen>
        </para>

        <para>
          To:

          <screen width="60">
<computeroutput>
ln -s ./cdp /usr/local/bin/cdplay
</computeroutput>
          </screen>
        </para>

        <para>
          Now <filename>cdplay</filename> will always point to
          <filename>cdp</filename>, no matter where it's installed.  When
          building relocatable packages, relative symlinks are your friend!
        </para>

        <para>
          After rebuilding the package, let's see if our modifications have the
          desired effect.  First, a normal install with the default prefix:

          <screen width="60">
<prompt># </prompt><userinput>rpm -Uvh cdplayer-1.0-1.i386.rpm</userinput>
<computeroutput>
cdplayer    ##################################################
</computeroutput>
<prompt># </prompt><userinput>cd /usr/local/bin/</userinput>
<prompt># </prompt><userinput>ls -al cdplay</userinput>
<computeroutput>
lrwxrwxrwx   1 root     root           18 Oct  8 22:32 cdplay -&gt; ./cdp*
</computeroutput>
<prompt># </prompt>
          </screen>
        </para>

        <para>
          Next, we'll try a second install using the <command>--prefix</command>
          option (after we first delete the original package):

          <screen width="60">
<prompt># </prompt><userinput>rpm -e cdplayer</userinput>
<prompt># </prompt><userinput>rpm -Uvh --prefix /a/dumb/prefix cdplayer-1.0-1.i386.rpm</userinput>
<computeroutput>
cdplayer    ##################################################
</computeroutput>
<prompt># </prompt><userinput>cd /a/dumb/prefix/bin/</userinput>
<prompt># </prompt><userinput>ls -al cdplay</userinput>
<computeroutput>
lrwxrwxrwx   1 root     root           30 Oct  8 22:34 cdplay -&gt; ./cdp*
</computeroutput>
<prompt>#</prompt>
          </screen>
        </para>

        <para>
          As you can see, the trickiest part about building relocatable packages
          is making sure the software you're packaging is up to the task.  Once
          that part of the job is done, the actual modifications are
          straightforward.
        </para>

        <para>
          In the next chapter, we'll cover how packages can be built in
          non-standard directories, as well as how non-root users can build
          packages.
        </para>
      </sect2>
    </sect1>
  </chapter>
